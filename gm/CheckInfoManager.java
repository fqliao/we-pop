package cn.webank.blockchain.contracts.web3j;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.channel.event.filter.EventLogPushWithDecodeCallback;
import org.fisco.bcos.web3j.abi.EventEncoder;
import org.fisco.bcos.web3j.abi.FunctionEncoder;
import org.fisco.bcos.web3j.abi.FunctionReturnDecoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.Event;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.Log;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple1;
import org.fisco.bcos.web3j.tuples.generated.Tuple2;
import org.fisco.bcos.web3j.tuples.generated.Tuple3;
import org.fisco.bcos.web3j.tuples.generated.Tuple7;
import org.fisco.bcos.web3j.tuples.generated.Tuple8;
import org.fisco.bcos.web3j.tuples.generated.Tuple9;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;
import org.fisco.bcos.web3j.tx.txdecode.TransactionDecoder;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class CheckInfoManager extends Contract {
    public static String BINARY = "60806040523480156200001157600080fd5b50604051620040863803806200408683398101806040528101908080518201929190602001805182019291906020018051820192919060200180518201929190505050838381600090805190602001906200006e929190620001df565b50806001908051906020019062000087929190620001df565b50505081816200009662000266565b808060200180602001838103835285818151815260200191508051906020019080838360005b83811015620000d9578082015181840152602081019050620000bc565b50505050905090810190601f168015620001075780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b838110156200014257808201518184015260208101905062000125565b50505050905090810190601f168015620001705780820380516001836020036101000a031916815260200191505b50945050505050604051809103906000f08015801562000194573d6000803e3d6000fd5b50600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050506200029f565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200022257805160ff191683800117855562000253565b8280016001018555821562000253579182015b828111156200025257825182559160200191906001019062000235565b5b50905062000262919062000277565b5090565b604051610739806200394d83390190565b6200029c91905b80821115620002985760008160009055506001016200027e565b5090565b90565b61369e80620002af6000396000f3006080604052600436106200013f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313d24982146200014457806317cd5a8f14620001c25780631b85426114620002065780631f849ef614620002845780632dc1f7a61462000302578063305c39be14620003545780633b5baf9414620003ae5780634c2d8e4c14620003f25780635818b172146200047057806369312fce14620004f85780637b4832da1462000576578063ae7b68f314620005bc578063aee0eabf14620005ea578063b11b6883146200066e578063b40bfca91462000704578063b4e37f54146200079a578063ce0111f314620007c8578063cecc988714620007f8578063d43be97e146200084a578063d8fe5476146200089c578063f84f303314620009d4578063fbd6447f1462000a1c575b600080fd5b3480156200015157600080fd5b506200018060048036038101908080359060200190929190803560001916906020019092919050505062000aa7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015620001cf57600080fd5b50620001f06004803603810190808035906020019092919050505062000b03565b6040518082815260200191505060405180910390f35b3480156200021357600080fd5b506200024260048036038101908080359060200190929190803560001916906020019092919050505062000b27565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156200029157600080fd5b50620002c060048036038101908080359060200190929190803560001916906020019092919050505062000b3d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156200030f57600080fd5b506200033e60048036038101908080356000191690602001909291908035906020019092919050505062000dbb565b6040518082815260200191505060405180910390f35b3480156200036157600080fd5b506200036c62000e72565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015620003bb57600080fd5b50620003dc6004803603810190808035906020019092919050505062000e98565b6040518082815260200191505060405180910390f35b348015620003ff57600080fd5b506200042e60048036038101908080359060200190929190803560001916906020019092919050505062000ebc565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156200047d57600080fd5b50620004f6600480360381019080803560001916906020019092919080359060200190929190803590602001909291908035600019169060200190929190803590602001909291908035906020019092919080359060200190929190803590602001909291908035906020019092919050505062000ed2565b005b3480156200050557600080fd5b506200053460048036038101908080359060200190929190803560001916906020019092919050505062001363565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156200058357600080fd5b50620005ba600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062001379565b005b348015620005c957600080fd5b50620005d4620013bd565b6040518082815260200191505060405180910390f35b348015620005f757600080fd5b5062000626600480360381019080803560001916906020019092919080359060200190929190505050620013c7565b60405180888152602001876000191660001916815260200186815260200185815260200184815260200183815260200182815260200197505050505050505060405180910390f35b3480156200067b57600080fd5b5062000686620018df565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015620006c8578082015181840152602081019050620006ab565b50505050905090810190601f168015620006f65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156200071157600080fd5b506200071c62001981565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156200075e57808201518184015260208101905062000741565b50505050905090810190601f1680156200078c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015620007a757600080fd5b50620007b262001a23565b6040518082815260200191505060405180910390f35b348015620007d557600080fd5b50620007f66004803603810190808035906020019092919050505062001a30565b005b3480156200080557600080fd5b506200083460048036038101908080356000191690602001909291908035906020019092919050505062001a66565b6040518082815260200191505060405180910390f35b3480156200085757600080fd5b506200088660048036038101908080356000191690602001909291908035906020019092919050505062001b69565b6040518082815260200191505060405180910390f35b348015620008a957600080fd5b50620008b462001ceb565b6040518080602001806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838103835286818151815260200191508051906020019080838360005b838110156200092c5780820151818401526020810190506200090f565b50505050905090810190601f1680156200095a5780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b838110156200099557808201518184015260208101905062000978565b50505050905090810190601f168015620009c35780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b348015620009e157600080fd5b5062000a1a6004803603810190808035600019169060200190929190803590602001909291908035906020019092919050505062001e61565b005b34801562000a2957600080fd5b5062000a5860048036038101908080356000191690602001909291908035906020019092919050505062001efa565b6040518089815260200188815260200187600019166000191681526020018681526020018581526020018481526020018381526020018281526020019850505050505050505060405180910390f35b600080600460008581526020019081526020016000206000846000191660001916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508091505092915050565b60058181548110151562000b1357fe5b906000526020600020016000915090505481565b600062000b35838362000b3d565b905092915050565b600080600460008581526020019081526020016000206000846000191660001916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff16141562000db157600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1662000bdc62002444565b808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050604051809103906000f08015801562000c2f573d6000803e3d6000fd5b5090508073ffffffffffffffffffffffffffffffffffffffff1663ce0111f3856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b15801562000ca257600080fd5b505af115801562000cb7573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16637082b6f060016040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b15801562000d2c57600080fd5b505af115801562000d41573d6000803e3d6000fd5b5050505080600460008681526020019081526020016000206000856000191660001916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b8091505092915050565b600062000dc9828462001363565b73ffffffffffffffffffffffffffffffffffffffff1663244e58416040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801562000e2d57600080fd5b505af115801562000e42573d6000803e3d6000fd5b505050506040513d602081101562000e5957600080fd5b8101908080519060200190929190505050905092915050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060058281548110151562000eaa57fe5b90600052602060002001549050919050565b600062000eca838362000b3d565b905092915050565b600062000ee0898b62001363565b90508073ffffffffffffffffffffffffffffffffffffffff1663019bfe838a6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801562000f5257600080fd5b505af115801562000f67573d6000803e3d6000fd5b505050506040513d602081101562000f7e57600080fd5b8101908080519060200190929190505050508073ffffffffffffffffffffffffffffffffffffffff1663af1c9a5f896040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b1580156200100057600080fd5b505af115801562001015573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16639f0dfecb886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050600060405180830381600087803b1580156200109157600080fd5b505af1158015620010a6573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663e68ffd3c876040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b1580156200111a57600080fd5b505af11580156200112f573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663142f3107866040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b158015620011a357600080fd5b505af1158015620011b8573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16631864fa3a856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b1580156200122c57600080fd5b505af115801562001241573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663a24213bd846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b158015620012b557600080fd5b505af1158015620012ca573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff166320f3f186836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b1580156200133e57600080fd5b505af115801562001353573d6000803e3d6000fd5b5050505050505050505050505050565b600062001371838362000b3d565b905092915050565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600354905090565b6000806000806000806000806000620013e18a8c62000aa7565b91508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff1614156200145157614fb16000806000806000859550600094939291908494508393508292508191508090509850985098509850985098509850620018d1565b8190508073ffffffffffffffffffffffffffffffffffffffff1663244e58416040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015620014b957600080fd5b505af1158015620014ce573d6000803e3d6000fd5b505050506040513d6020811015620014e557600080fd5b81019080805190602001909291905050508173ffffffffffffffffffffffffffffffffffffffff166382a71fc46040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200155b57600080fd5b505af115801562001570573d6000803e3d6000fd5b505050506040513d60208110156200158757600080fd5b81019080805190602001909291905050508273ffffffffffffffffffffffffffffffffffffffff1663cdfe0d206040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015620015fd57600080fd5b505af115801562001612573d6000803e3d6000fd5b505050506040513d60208110156200162957600080fd5b81019080805190602001909291905050508373ffffffffffffffffffffffffffffffffffffffff166367e4107f6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200169f57600080fd5b505af1158015620016b4573d6000803e3d6000fd5b505050506040513d6020811015620016cb57600080fd5b81019080805190602001909291905050508473ffffffffffffffffffffffffffffffffffffffff166354de7bf16040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200174157600080fd5b505af115801562001756573d6000803e3d6000fd5b505050506040513d60208110156200176d57600080fd5b81019080805190602001909291905050508573ffffffffffffffffffffffffffffffffffffffff1663fcebfaea6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015620017e357600080fd5b505af1158015620017f8573d6000803e3d6000fd5b505050506040513d60208110156200180f57600080fd5b81019080805190602001909291905050508673ffffffffffffffffffffffffffffffffffffffff166323159b3b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200188557600080fd5b505af11580156200189a573d6000803e3d6000fd5b505050506040513d6020811015620018b157600080fd5b810190808051906020019092919050505098509850985098509850985098505b505092959891949750929550565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015620019795780601f106200194d5761010080835404028352916020019162001979565b820191906000526020600020905b8154815290600101906020018083116200195b57829003601f168201915b505050505081565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801562001a1b5780601f10620019ef5761010080835404028352916020019162001a1b565b820191906000526020600020905b815481529060010190602001808311620019fd57829003601f168201915b505050505081565b6000600580549050905090565b80600381905550600581908060018154018082558091505090600182039060005260206000200160009091929091909150555050565b600080600062001a77848662000aa7565b91508190508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff16141562001abc576002925062001b61565b8073ffffffffffffffffffffffffffffffffffffffff1663f72bd4706040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801562001b2157600080fd5b505af115801562001b36573d6000803e3d6000fd5b505050506040513d602081101562001b4d57600080fd5b810190808051906020019092919050505092505b505092915050565b600080600080600062001b7d868862000aa7565b93508392508373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff16141562001c5e5762001bc4868862000b3d565b5062001bd1868862000aa7565b91508190508073ffffffffffffffffffffffffffffffffffffffff1663f03a84196040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15801562001c3b57600080fd5b505af115801562001c50573d6000803e3d6000fd5b505050506000945062001ce1565b8273ffffffffffffffffffffffffffffffffffffffff1663f03a84196040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15801562001cc357600080fd5b505af115801562001cd8573d6000803e3d6000fd5b50505050600094505b5050505092915050565b6060806000806001600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801562001daf5780601f1062001d835761010080835404028352916020019162001daf565b820191906000526020600020905b81548152906001019060200180831162001d9157829003601f168201915b50505050509250818054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801562001e4f5780601f1062001e235761010080835404028352916020019162001e4f565b820191906000526020600020905b81548152906001019060200180831162001e3157829003601f168201915b50505050509150925092509250909192565b62001e6d828462001363565b73ffffffffffffffffffffffffffffffffffffffff1663af1c9a5f826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b15801562001edc57600080fd5b505af115801562001ef1573d6000803e3d6000fd5b50505050505050565b600080600080600080600080600062001f148a8c62001363565b90508073ffffffffffffffffffffffffffffffffffffffff1663244e58416040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801562001f7b57600080fd5b505af115801562001f90573d6000803e3d6000fd5b505050506040513d602081101562001fa757600080fd5b81019080805190602001909291905050508173ffffffffffffffffffffffffffffffffffffffff1663274714266040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200201d57600080fd5b505af115801562002032573d6000803e3d6000fd5b505050506040513d60208110156200204957600080fd5b81019080805190602001909291905050508273ffffffffffffffffffffffffffffffffffffffff166382a71fc46040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015620020bf57600080fd5b505af1158015620020d4573d6000803e3d6000fd5b505050506040513d6020811015620020eb57600080fd5b81019080805190602001909291905050508373ffffffffffffffffffffffffffffffffffffffff1663cdfe0d206040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200216157600080fd5b505af115801562002176573d6000803e3d6000fd5b505050506040513d60208110156200218d57600080fd5b81019080805190602001909291905050508473ffffffffffffffffffffffffffffffffffffffff166367e4107f6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200220357600080fd5b505af115801562002218573d6000803e3d6000fd5b505050506040513d60208110156200222f57600080fd5b81019080805190602001909291905050508573ffffffffffffffffffffffffffffffffffffffff166354de7bf16040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015620022a557600080fd5b505af1158015620022ba573d6000803e3d6000fd5b505050506040513d6020811015620022d157600080fd5b81019080805190602001909291905050508673ffffffffffffffffffffffffffffffffffffffff1663fcebfaea6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200234757600080fd5b505af11580156200235c573d6000803e3d6000fd5b505050506040513d60208110156200237357600080fd5b81019080805190602001909291905050508773ffffffffffffffffffffffffffffffffffffffff166323159b3b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015620023e957600080fd5b505af1158015620023fe573d6000803e3d6000fd5b505050506040513d60208110156200241557600080fd5b810190808051906020019092919050505098509850985098509850985098509850509295985092959890939650565b60405161121d806200245683390190560060806040526000600e553480156200001657600080fd5b506040516020806200121d8339810180604052810190808051906020019092919050505060206040519081016040528060008152506020604051908101604052806000815250816000908051906020019062000074929190620000f5565b5080600190805190602001906200008d929190620000f5565b505050620000aa81620000b1640100000000026401000000009004565b50620001a4565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200013857805160ff191683800117855562000169565b8280016001018555821562000169579182015b82811115620001685782518255916020019190600101906200014b565b5b5090506200017891906200017c565b5090565b620001a191905b808211156200019d57600081600090555060010162000183565b5090565b90565b61106980620001b46000396000f30060806040526004361061020f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063019bfe83146102145780630ce432bb14610255578063142f31071461029e5780631864fa3a146102cb57806320f3f186146102f8578063212df0d214610325578063214277dc1461035057806323159b3b1461037b578063244e5841146103a657806327471426146103d1578063299e04e2146103fc578063366425aa1461042f57806336e6d6b41461046057806343dbf0351461048d578063454c9a5a146104ba578063529dc81c146104fb57806354de7bf114610526578063673506851461055157806367e4107f146105825780637082b6f0146105ad5780637b4832da146105da5780637d5301851461061d5780637ea9bf071461064a57806382a71fc4146106775780638bbeab97146106aa57806393d2f5ad146106d55780639f0dfecb14610700578063a24213bd14610731578063af1c9a5f1461075e578063b11b68831461078b578063b1deb9d21461081b578063b40bfca914610846578063bc1a7afd146108d6578063cdfe0d2014610901578063ce0111f31461092c578063d8fe547614610959578063e68ffd3c14610a88578063f03a841914610ab5578063f4cd650914610acc578063f72bd47014610af9578063f8049d0d14610b24578063fcebfaea14610b4f578063fede337014610b7a575b600080fd5b34801561022057600080fd5b5061023f60048036038101908080359060200190929190505050610ba5565b6040518082815260200191505060405180910390f35b34801561026157600080fd5b5061028060048036038101908080359060200190929190505050610bb3565b60405180826000191660001916815260200191505060405180910390f35b3480156102aa57600080fd5b506102c960048036038101908080359060200190929190505050610bd6565b005b3480156102d757600080fd5b506102f660048036038101908080359060200190929190505050610be0565b005b34801561030457600080fd5b5061032360048036038101908080359060200190929190505050610bea565b005b34801561033157600080fd5b5061033a610bf4565b6040518082815260200191505060405180910390f35b34801561035c57600080fd5b50610365610c01565b6040518082815260200191505060405180910390f35b34801561038757600080fd5b50610390610c07565b6040518082815260200191505060405180910390f35b3480156103b257600080fd5b506103bb610c0d565b6040518082815260200191505060405180910390f35b3480156103dd57600080fd5b506103e6610c13565b6040518082815260200191505060405180910390f35b34801561040857600080fd5b50610411610c19565b60405180826000191660001916815260200191505060405180910390f35b34801561043b57600080fd5b5061045e6004803603810190808035600019169060200190929190505050610c1f565b005b34801561046c57600080fd5b5061048b60048036038101908080359060200190929190505050610c54565b005b34801561049957600080fd5b506104b860048036038101908080359060200190929190505050610c5e565b005b3480156104c657600080fd5b506104e560048036038101908080359060200190929190505050610c68565b6040518082815260200191505060405180910390f35b34801561050757600080fd5b50610510610c8b565b6040518082815260200191505060405180910390f35b34801561053257600080fd5b5061053b610c91565b6040518082815260200191505060405180910390f35b34801561055d57600080fd5b506105806004803603810190808035600019169060200190929190505050610c97565b005b34801561058e57600080fd5b50610597610ca5565b6040518082815260200191505060405180910390f35b3480156105b957600080fd5b506105d860048036038101908080359060200190929190505050610cab565b005b3480156105e657600080fd5b5061061b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610cb5565b005b34801561062957600080fd5b5061064860048036038101908080359060200190929190505050610cf9565b005b34801561065657600080fd5b5061067560048036038101908080359060200190929190505050610d03565b005b34801561068357600080fd5b5061068c610d0d565b60405180826000191660001916815260200191505060405180910390f35b3480156106b657600080fd5b506106bf610d13565b6040518082815260200191505060405180910390f35b3480156106e157600080fd5b506106ea610d19565b6040518082815260200191505060405180910390f35b34801561070c57600080fd5b5061072f6004803603810190808035600019169060200190929190505050610d1f565b005b34801561073d57600080fd5b5061075c60048036038101908080359060200190929190505050610d2d565b005b34801561076a57600080fd5b5061078960048036038101908080359060200190929190505050610d37565b005b34801561079757600080fd5b506107a0610d41565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156107e05780820151818401526020810190506107c5565b50505050905090810190601f16801561080d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561082757600080fd5b50610830610ddf565b6040518082815260200191505060405180910390f35b34801561085257600080fd5b5061085b610de5565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561089b578082015181840152602081019050610880565b50505050905090810190601f1680156108c85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156108e257600080fd5b506108eb610e83565b6040518082815260200191505060405180910390f35b34801561090d57600080fd5b50610916610e89565b6040518082815260200191505060405180910390f35b34801561093857600080fd5b5061095760048036038101908080359060200190929190505050610e8f565b005b34801561096557600080fd5b5061096e610e99565b6040518080602001806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838103835286818151815260200191508051906020019080838360005b838110156109e45780820151818401526020810190506109c9565b50505050905090810190601f168015610a115780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b83811015610a4a578082015181840152602081019050610a2f565b50505050905090810190601f168015610a775780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b348015610a9457600080fd5b50610ab360048036038101908080359060200190929190505050611007565b005b348015610ac157600080fd5b50610aca611011565b005b348015610ad857600080fd5b50610af76004803603810190808035906020019092919050505061101b565b005b348015610b0557600080fd5b50610b0e611025565b6040518082815260200191505060405180910390f35b348015610b3057600080fd5b50610b3961102b565b6040518082815260200191505060405180910390f35b348015610b5b57600080fd5b50610b64611031565b6040518082815260200191505060405180910390f35b348015610b8657600080fd5b50610b8f611037565b6040518082815260200191505060405180910390f35b600081600f81905550919050565b600581815481101515610bc257fe5b906000526020600020016000915090505481565b8060128190555050565b8060138190555050565b8060158190555050565b6000600580549050905090565b60085481565b60155481565b600b5481565b600f5481565b600d5481565b600581908060018154018082558091505090600182039060005260206000200160009091929091909150906000191690555050565b8060068190555050565b80600a8190555050565b601681815481101515610c7757fe5b906000526020600020016000915090505481565b600c5481565b60135481565b80600d816000191690555050565b60125481565b8060078190555050565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b8060088190555050565b80600c8190555050565b60105481565b60035481565b60075481565b806010816000191690555050565b8060148190555050565b80600b8190555050565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610dd75780601f10610dac57610100808354040283529160200191610dd7565b820191906000526020600020905b815481529060010190602001808311610dba57829003601f168201915b505050505081565b600a5481565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e7b5780601f10610e5057610100808354040283529160200191610e7b565b820191906000526020600020905b815481529060010190602001808311610e5e57829003601f168201915b505050505081565b60095481565b60115481565b8060038190555050565b6060806000806001600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f595780601f10610f2e57610100808354040283529160200191610f59565b820191906000526020600020905b815481529060010190602001808311610f3c57829003601f168201915b50505050509250818054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ff55780601f10610fca57610100808354040283529160200191610ff5565b820191906000526020600020905b815481529060010190602001808311610fd857829003601f168201915b50505050509150925092509250909192565b8060118190555050565b6001600481905550565b8060098190555050565b60045481565b60065481565b60145481565b600e54815600a165627a7a72305820ff0b8e114cb93c5c2d4aab036618ada5e63ef8f29ccf7a96b851e16e8d0854c90029a165627a7a723058207790e40d47ff50b39b2ada9c6a64abc90a78805279f16e1d7b3e5a1763b8825d0029608060405234801561001057600080fd5b5060405161073938038061073983398101806040528101908080518201929190602001805182019291905050508160009080519060200190610053929190610072565b50806001908051906020019061006a929190610072565b505050610117565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100b357805160ff19168380011785556100e1565b828001600101855582156100e1579182015b828111156100e05782518255916020019190600101906100c5565b5b5090506100ee91906100f2565b5090565b61011491905b808211156101105760008160009055506001016100f8565b5090565b90565b610613806101266000396000f300608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680637b4832da14610067578063b11b6883146100aa578063b40bfca91461013a578063d8fe5476146101ca575b600080fd5b34801561007357600080fd5b506100a8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506102f9565b005b3480156100b657600080fd5b506100bf61033d565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100ff5780820151818401526020810190506100e4565b50505050905090810190601f16801561012c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561014657600080fd5b5061014f6103db565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561018f578082015181840152602081019050610174565b50505050905090810190601f1680156101bc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101d657600080fd5b506101df610479565b6040518080602001806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838103835286818151815260200191508051906020019080838360005b8381101561025557808201518184015260208101905061023a565b50505050905090810190601f1680156102825780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b838110156102bb5780820151818401526020810190506102a0565b50505050905090810190601f1680156102e85780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103d35780601f106103a8576101008083540402835291602001916103d3565b820191906000526020600020905b8154815290600101906020018083116103b657829003601f168201915b505050505081565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104715780601f1061044657610100808354040283529160200191610471565b820191906000526020600020905b81548152906001019060200180831161045457829003601f168201915b505050505081565b6060806000806001600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105395780601f1061050e57610100808354040283529160200191610539565b820191906000526020600020905b81548152906001019060200180831161051c57829003601f168201915b50505050509250818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105d55780601f106105aa576101008083540402835291602001916105d5565b820191906000526020600020905b8154815290600101906020018083116105b857829003601f168201915b505050505091509250925092509091925600a165627a7a72305820f617b3ee499d4043dc29c28f8a7e4be5a3862f00075380a3a00be3997550fea40029";

    public static final String ABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"check_code\",\"type\":\"int256\"},{\"name\":\"org_id\",\"type\":\"bytes32\"}],\"name\":\"getCheckCodeInfoByCheckCode\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"m_check_code_list\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"check_code\",\"type\":\"int256\"},{\"name\":\"org_id\",\"type\":\"bytes32\"}],\"name\":\"getIssueBankCheckInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"check_code\",\"type\":\"int256\"},{\"name\":\"org_id\",\"type\":\"bytes32\"}],\"name\":\"getCheckInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"orgId\",\"type\":\"bytes32\"},{\"name\":\"checkCode\",\"type\":\"int256\"}],\"name\":\"getOrgCheckStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"check_info_meta\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"getCheckCodeByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"check_code\",\"type\":\"int256\"},{\"name\":\"org_id\",\"type\":\"bytes32\"}],\"name\":\"getAcquirerBankCheckInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orgId\",\"type\":\"bytes32\"},{\"name\":\"lastCheckCode\",\"type\":\"int256\"},{\"name\":\"retStatus\",\"type\":\"int256\"},{\"name\":\"walletOwnerOrg\",\"type\":\"bytes32\"},{\"name\":\"totalRmbAmt\",\"type\":\"int256\"},{\"name\":\"totalTxAmt\",\"type\":\"int256\"},{\"name\":\"currency\",\"type\":\"int256\"},{\"name\":\"wbBalance\",\"type\":\"int256\"},{\"name\":\"timestamp\",\"type\":\"int256\"}],\"name\":\"setAllOrgCheckStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"check_code\",\"type\":\"int256\"},{\"name\":\"org_id\",\"type\":\"bytes32\"}],\"name\":\"getClearCenterCheckInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"meta\",\"type\":\"address\"}],\"name\":\"setMetaAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentCheckCode\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"orgId\",\"type\":\"bytes32\"},{\"name\":\"checkCode\",\"type\":\"int256\"}],\"name\":\"getRetOrgCheckStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"abi\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCheckCodeListLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"check_code\",\"type\":\"int256\"}],\"name\":\"setCheckCode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orgId\",\"type\":\"bytes32\"},{\"name\":\"checkCode\",\"type\":\"int256\"}],\"name\":\"getCheckCodeStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orgId\",\"type\":\"bytes32\"},{\"name\":\"checkCode\",\"type\":\"int256\"}],\"name\":\"setCheckCodeStatus\",\"outputs\":[{\"name\":\"status\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMeta\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orgId\",\"type\":\"bytes32\"},{\"name\":\"checkCode\",\"type\":\"int256\"},{\"name\":\"retStatus\",\"type\":\"int256\"}],\"name\":\"setOrgCheckStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"orgId\",\"type\":\"bytes32\"},{\"name\":\"checkCode\",\"type\":\"int256\"}],\"name\":\"getAllOrgCheckStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"abi\",\"type\":\"string\"},{\"name\":\"check_info_name\",\"type\":\"string\"},{\"name\":\"check_info_abi\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oper\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"check_code\",\"type\":\"int256\"}],\"name\":\"transRetLog\",\"type\":\"event\"}]";

    public static final TransactionDecoder transactionDecoder = new TransactionDecoder(ABI, BINARY);

    public static final String FUNC_GETCHECKCODEINFOBYCHECKCODE = "getCheckCodeInfoByCheckCode";

    public static final String FUNC_M_CHECK_CODE_LIST = "m_check_code_list";

    public static final String FUNC_GETISSUEBANKCHECKINFO = "getIssueBankCheckInfo";

    public static final String FUNC_GETCHECKINFO = "getCheckInfo";

    public static final String FUNC_GETORGCHECKSTATUS = "getOrgCheckStatus";

    public static final String FUNC_CHECK_INFO_META = "check_info_meta";

    public static final String FUNC_GETCHECKCODEBYINDEX = "getCheckCodeByIndex";

    public static final String FUNC_GETACQUIRERBANKCHECKINFO = "getAcquirerBankCheckInfo";

    public static final String FUNC_SETALLORGCHECKSTATUS = "setAllOrgCheckStatus";

    public static final String FUNC_GETCLEARCENTERCHECKINFO = "getClearCenterCheckInfo";

    public static final String FUNC_SETMETAADDRESS = "setMetaAddress";

    public static final String FUNC_CURRENTCHECKCODE = "currentCheckCode";

    public static final String FUNC_GETRETORGCHECKSTATUS = "getRetOrgCheckStatus";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_ABI = "abi";

    public static final String FUNC_GETCHECKCODELISTLENGTH = "getCheckCodeListLength";

    public static final String FUNC_SETCHECKCODE = "setCheckCode";

    public static final String FUNC_GETCHECKCODESTATUS = "getCheckCodeStatus";

    public static final String FUNC_SETCHECKCODESTATUS = "setCheckCodeStatus";

    public static final String FUNC_GETMETA = "getMeta";

    public static final String FUNC_SETORGCHECKSTATUS = "setOrgCheckStatus";

    public static final String FUNC_GETALLORGCHECKSTATUS = "getAllOrgCheckStatus";

    public static final Event TRANSRETLOG_EVENT = new Event("transRetLog", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
    ;

    @Deprecated
    protected CheckInfoManager(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected CheckInfoManager(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected CheckInfoManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected CheckInfoManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static TransactionDecoder getTransactionDecoder() {
        return transactionDecoder;
    }

    public RemoteCall<TransactionReceipt> getCheckCodeInfoByCheckCode(BigInteger check_code, byte[] org_id) {
        final Function function = new Function(
                FUNC_GETCHECKCODEINFOBYCHECKCODE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(check_code), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(org_id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void getCheckCodeInfoByCheckCode(BigInteger check_code, byte[] org_id, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_GETCHECKCODEINFOBYCHECKCODE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(check_code), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(org_id)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getCheckCodeInfoByCheckCodeSeq(BigInteger check_code, byte[] org_id) {
        final Function function = new Function(
                FUNC_GETCHECKCODEINFOBYCHECKCODE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(check_code), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(org_id)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<BigInteger, byte[]> getGetCheckCodeInfoByCheckCodeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GETCHECKCODEINFOBYCHECKCODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<BigInteger, byte[]>(

                (BigInteger) results.get(0).getValue(), 
                (byte[]) results.get(1).getValue()
                );
    }

    public Tuple1<String> getGetCheckCodeInfoByCheckCodeOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETCHECKCODEINFOBYCHECKCODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public RemoteCall<BigInteger> m_check_code_list(BigInteger param0) {
        final Function function = new Function(FUNC_M_CHECK_CODE_LIST, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> getIssueBankCheckInfo(BigInteger check_code, byte[] org_id) {
        final Function function = new Function(
                FUNC_GETISSUEBANKCHECKINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(check_code), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(org_id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void getIssueBankCheckInfo(BigInteger check_code, byte[] org_id, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_GETISSUEBANKCHECKINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(check_code), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(org_id)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getIssueBankCheckInfoSeq(BigInteger check_code, byte[] org_id) {
        final Function function = new Function(
                FUNC_GETISSUEBANKCHECKINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(check_code), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(org_id)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<BigInteger, byte[]> getGetIssueBankCheckInfoInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GETISSUEBANKCHECKINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<BigInteger, byte[]>(

                (BigInteger) results.get(0).getValue(), 
                (byte[]) results.get(1).getValue()
                );
    }

    public Tuple1<String> getGetIssueBankCheckInfoOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETISSUEBANKCHECKINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> getCheckInfo(BigInteger check_code, byte[] org_id) {
        final Function function = new Function(
                FUNC_GETCHECKINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(check_code), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(org_id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void getCheckInfo(BigInteger check_code, byte[] org_id, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_GETCHECKINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(check_code), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(org_id)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getCheckInfoSeq(BigInteger check_code, byte[] org_id) {
        final Function function = new Function(
                FUNC_GETCHECKINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(check_code), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(org_id)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<BigInteger, byte[]> getGetCheckInfoInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GETCHECKINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<BigInteger, byte[]>(

                (BigInteger) results.get(0).getValue(), 
                (byte[]) results.get(1).getValue()
                );
    }

    public Tuple1<String> getGetCheckInfoOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETCHECKINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public RemoteCall<BigInteger> getOrgCheckStatus(byte[] orgId, BigInteger checkCode) {
        final Function function = new Function(FUNC_GETORGCHECKSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(checkCode)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> check_info_meta() {
        final Function function = new Function(FUNC_CHECK_INFO_META, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> getCheckCodeByIndex(BigInteger offset) {
        final Function function = new Function(FUNC_GETCHECKCODEBYINDEX, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(offset)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> getAcquirerBankCheckInfo(BigInteger check_code, byte[] org_id) {
        final Function function = new Function(
                FUNC_GETACQUIRERBANKCHECKINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(check_code), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(org_id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void getAcquirerBankCheckInfo(BigInteger check_code, byte[] org_id, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_GETACQUIRERBANKCHECKINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(check_code), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(org_id)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getAcquirerBankCheckInfoSeq(BigInteger check_code, byte[] org_id) {
        final Function function = new Function(
                FUNC_GETACQUIRERBANKCHECKINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(check_code), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(org_id)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<BigInteger, byte[]> getGetAcquirerBankCheckInfoInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GETACQUIRERBANKCHECKINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<BigInteger, byte[]>(

                (BigInteger) results.get(0).getValue(), 
                (byte[]) results.get(1).getValue()
                );
    }

    public Tuple1<String> getGetAcquirerBankCheckInfoOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETACQUIRERBANKCHECKINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> setAllOrgCheckStatus(byte[] orgId, BigInteger lastCheckCode, BigInteger retStatus, byte[] walletOwnerOrg, BigInteger totalRmbAmt, BigInteger totalTxAmt, BigInteger currency, BigInteger wbBalance, BigInteger timestamp) {
        final Function function = new Function(
                FUNC_SETALLORGCHECKSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(lastCheckCode), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(retStatus), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(walletOwnerOrg), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(totalRmbAmt), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(totalTxAmt), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(currency), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(wbBalance), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(timestamp)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setAllOrgCheckStatus(byte[] orgId, BigInteger lastCheckCode, BigInteger retStatus, byte[] walletOwnerOrg, BigInteger totalRmbAmt, BigInteger totalTxAmt, BigInteger currency, BigInteger wbBalance, BigInteger timestamp, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SETALLORGCHECKSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(lastCheckCode), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(retStatus), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(walletOwnerOrg), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(totalRmbAmt), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(totalTxAmt), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(currency), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(wbBalance), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(timestamp)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setAllOrgCheckStatusSeq(byte[] orgId, BigInteger lastCheckCode, BigInteger retStatus, byte[] walletOwnerOrg, BigInteger totalRmbAmt, BigInteger totalTxAmt, BigInteger currency, BigInteger wbBalance, BigInteger timestamp) {
        final Function function = new Function(
                FUNC_SETALLORGCHECKSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(lastCheckCode), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(retStatus), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(walletOwnerOrg), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(totalRmbAmt), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(totalTxAmt), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(currency), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(wbBalance), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(timestamp)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple9<byte[], BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> getSetAllOrgCheckStatusInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETALLORGCHECKSTATUS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple9<byte[], BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(

                (byte[]) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (byte[]) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue(), 
                (BigInteger) results.get(6).getValue(), 
                (BigInteger) results.get(7).getValue(), 
                (BigInteger) results.get(8).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> getClearCenterCheckInfo(BigInteger check_code, byte[] org_id) {
        final Function function = new Function(
                FUNC_GETCLEARCENTERCHECKINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(check_code), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(org_id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void getClearCenterCheckInfo(BigInteger check_code, byte[] org_id, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_GETCLEARCENTERCHECKINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(check_code), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(org_id)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getClearCenterCheckInfoSeq(BigInteger check_code, byte[] org_id) {
        final Function function = new Function(
                FUNC_GETCLEARCENTERCHECKINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(check_code), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(org_id)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<BigInteger, byte[]> getGetClearCenterCheckInfoInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GETCLEARCENTERCHECKINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<BigInteger, byte[]>(

                (BigInteger) results.get(0).getValue(), 
                (byte[]) results.get(1).getValue()
                );
    }

    public Tuple1<String> getGetClearCenterCheckInfoOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETCLEARCENTERCHECKINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> setMetaAddress(String meta) {
        final Function function = new Function(
                FUNC_SETMETAADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(meta)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setMetaAddress(String meta, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SETMETAADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(meta)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setMetaAddressSeq(String meta) {
        final Function function = new Function(
                FUNC_SETMETAADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(meta)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<String> getSetMetaAddressInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMETAADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public RemoteCall<BigInteger> currentCheckCode() {
        final Function function = new Function(FUNC_CURRENTCHECKCODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple7<BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> getRetOrgCheckStatus(byte[] orgId, BigInteger checkCode) {
        final Function function = new Function(FUNC_GETRETORGCHECKSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(checkCode)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
        return new RemoteCall<Tuple7<BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple7<BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple7<BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> abi() {
        final Function function = new Function(FUNC_ABI, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> getCheckCodeListLength() {
        final Function function = new Function(FUNC_GETCHECKCODELISTLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> setCheckCode(BigInteger check_code) {
        final Function function = new Function(
                FUNC_SETCHECKCODE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(check_code)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setCheckCode(BigInteger check_code, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SETCHECKCODE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(check_code)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setCheckCodeSeq(BigInteger check_code) {
        final Function function = new Function(
                FUNC_SETCHECKCODE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(check_code)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<BigInteger> getSetCheckCodeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETCHECKCODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> getCheckCodeStatus(byte[] orgId, BigInteger checkCode) {
        final Function function = new Function(
                FUNC_GETCHECKCODESTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(checkCode)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void getCheckCodeStatus(byte[] orgId, BigInteger checkCode, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_GETCHECKCODESTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(checkCode)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getCheckCodeStatusSeq(byte[] orgId, BigInteger checkCode) {
        final Function function = new Function(
                FUNC_GETCHECKCODESTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(checkCode)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<byte[], BigInteger> getGetCheckCodeStatusInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GETCHECKCODESTATUS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<byte[], BigInteger>(

                (byte[]) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getGetCheckCodeStatusOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETCHECKCODESTATUS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> setCheckCodeStatus(byte[] orgId, BigInteger checkCode) {
        final Function function = new Function(
                FUNC_SETCHECKCODESTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(checkCode)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setCheckCodeStatus(byte[] orgId, BigInteger checkCode, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SETCHECKCODESTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(checkCode)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setCheckCodeStatusSeq(byte[] orgId, BigInteger checkCode) {
        final Function function = new Function(
                FUNC_SETCHECKCODESTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(checkCode)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<byte[], BigInteger> getSetCheckCodeStatusInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETCHECKCODESTATUS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<byte[], BigInteger>(

                (byte[]) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getSetCheckCodeStatusOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SETCHECKCODESTATUS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public RemoteCall<Tuple3<String, String, String>> getMeta() {
        final Function function = new Function(FUNC_GETMETA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        return new RemoteCall<Tuple3<String, String, String>>(
                new Callable<Tuple3<String, String, String>>() {
                    @Override
                    public Tuple3<String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> setOrgCheckStatus(byte[] orgId, BigInteger checkCode, BigInteger retStatus) {
        final Function function = new Function(
                FUNC_SETORGCHECKSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(checkCode), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(retStatus)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setOrgCheckStatus(byte[] orgId, BigInteger checkCode, BigInteger retStatus, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SETORGCHECKSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(checkCode), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(retStatus)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setOrgCheckStatusSeq(byte[] orgId, BigInteger checkCode, BigInteger retStatus) {
        final Function function = new Function(
                FUNC_SETORGCHECKSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(checkCode), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(retStatus)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple3<byte[], BigInteger, BigInteger> getSetOrgCheckStatusInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETORGCHECKSTATUS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple3<byte[], BigInteger, BigInteger>(

                (byte[]) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public RemoteCall<Tuple8<BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> getAllOrgCheckStatus(byte[] orgId, BigInteger checkCode) {
        final Function function = new Function(FUNC_GETALLORGCHECKSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(checkCode)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
        return new RemoteCall<Tuple8<BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple8<BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple8<BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (byte[]) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue());
                    }
                });
    }

    public List<TransRetLogEventResponse> getTransRetLogEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSRETLOG_EVENT, transactionReceipt);
        ArrayList<TransRetLogEventResponse> responses = new ArrayList<TransRetLogEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransRetLogEventResponse typedResponse = new TransRetLogEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oper = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.check_code = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registertransRetLogEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(TRANSRETLOG_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registertransRetLogEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(TRANSRETLOG_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    @Deprecated
    public static CheckInfoManager load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new CheckInfoManager(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static CheckInfoManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new CheckInfoManager(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static CheckInfoManager load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new CheckInfoManager(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static CheckInfoManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new CheckInfoManager(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<CheckInfoManager> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String name, String abi, String check_info_name, String check_info_abi) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(abi), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(check_info_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(check_info_abi)));
        return deployRemoteCall(CheckInfoManager.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<CheckInfoManager> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String name, String abi, String check_info_name, String check_info_abi) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(abi), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(check_info_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(check_info_abi)));
        return deployRemoteCall(CheckInfoManager.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<CheckInfoManager> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String name, String abi, String check_info_name, String check_info_abi) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(abi), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(check_info_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(check_info_abi)));
        return deployRemoteCall(CheckInfoManager.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<CheckInfoManager> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String name, String abi, String check_info_name, String check_info_abi) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(abi), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(check_info_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(check_info_abi)));
        return deployRemoteCall(CheckInfoManager.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class TransRetLogEventResponse {
        public Log log;

        public String oper;

        public BigInteger status;

        public BigInteger check_code;
    }
}
