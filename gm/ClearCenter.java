package cn.webank.blockchain.contracts.web3j;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.channel.event.filter.EventLogPushWithDecodeCallback;
import org.fisco.bcos.web3j.abi.EventEncoder;
import org.fisco.bcos.web3j.abi.FunctionEncoder;
import org.fisco.bcos.web3j.abi.FunctionReturnDecoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.DynamicArray;
import org.fisco.bcos.web3j.abi.datatypes.Event;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;
import org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray3;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.Log;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple1;
import org.fisco.bcos.web3j.tuples.generated.Tuple2;
import org.fisco.bcos.web3j.tuples.generated.Tuple3;
import org.fisco.bcos.web3j.tuples.generated.Tuple6;
import org.fisco.bcos.web3j.tuples.generated.Tuple7;
import org.fisco.bcos.web3j.tuples.generated.Tuple8;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;
import org.fisco.bcos.web3j.tx.txdecode.TransactionDecoder;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class ClearCenter extends Contract {
    public static String BINARY = "";

    public static final String ABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"clearCenterInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"orgType\",\"type\":\"int256\"},{\"name\":\"orgId\",\"type\":\"bytes32\"}],\"name\":\"getBankAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkinfoManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orderAddr\",\"type\":\"address\"}],\"name\":\"doTransaction\",\"outputs\":[{\"name\":\"status\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"orgType\",\"type\":\"int256\"},{\"name\":\"orgId\",\"type\":\"bytes32\"},{\"name\":\"clearCode\",\"type\":\"int256\"}],\"name\":\"getClearingResult\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orgType\",\"type\":\"int256\"},{\"name\":\"orgID\",\"type\":\"bytes32\"},{\"name\":\"credit\",\"type\":\"int256\"}],\"name\":\"modifyBankCredit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orgType\",\"type\":\"int256\"},{\"name\":\"orgId\",\"type\":\"bytes32\"},{\"name\":\"orgAddr\",\"type\":\"address\"},{\"name\":\"balance\",\"type\":\"int256\"},{\"name\":\"credit\",\"type\":\"int256\"},{\"name\":\"currencyBase\",\"type\":\"int256\"}],\"name\":\"registerOrg\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setCheckInfoManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orgType\",\"type\":\"int256\"},{\"name\":\"orgID\",\"type\":\"bytes32\"},{\"name\":\"balance\",\"type\":\"int256\"}],\"name\":\"modifyBankAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"meta\",\"type\":\"address\"}],\"name\":\"setMetaAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lastCheckCode\",\"type\":\"int256\"},{\"name\":\"retStatus\",\"type\":\"int256\"},{\"name\":\"walletOwnerOrg\",\"type\":\"bytes32\"},{\"name\":\"totalRmbAmt\",\"type\":\"int256\"},{\"name\":\"totalTxAmt\",\"type\":\"int256\"},{\"name\":\"currency\",\"type\":\"int256\"},{\"name\":\"wbBalance\",\"type\":\"int256\"},{\"name\":\"timestamp\",\"type\":\"int256\"}],\"name\":\"setClearingStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"currency\",\"type\":\"int256\"},{\"name\":\"fxRate\",\"type\":\"int256\"},{\"name\":\"refundFxRate\",\"type\":\"int256\"},{\"name\":\"exTimeStamp\",\"type\":\"int256\"},{\"name\":\"currencyUnit\",\"type\":\"int256\"},{\"name\":\"exDataArr\",\"type\":\"uint256[3]\"},{\"name\":\"exDataStr0\",\"type\":\"bytes32[3]\"}],\"name\":\"setExchangeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"abi\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"clearCenterData\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMeta\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"currency\",\"type\":\"int256\"}],\"name\":\"getExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"clearCode\",\"type\":\"int256\"},{\"name\":\"fileTagResult\",\"type\":\"int256\"},{\"name\":\"filePath\",\"type\":\"bytes32\"}],\"name\":\"setTransFileTag\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orgId\",\"type\":\"bytes32\"},{\"name\":\"checkCode\",\"type\":\"int256\"}],\"name\":\"updateCheckCodeStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"checkCode\",\"type\":\"int256\"}],\"name\":\"getClearingStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"abi\",\"type\":\"string\"},{\"name\":\"infoAddr\",\"type\":\"address\"},{\"name\":\"dataAddr\",\"type\":\"address\"},{\"name\":\"checkInfoAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oper\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"check_code\",\"type\":\"int256\"}],\"name\":\"transRetLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"status\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"int256\"}],\"name\":\"accountBalancetLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tx_amt_1\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"currency_1\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"tx_amt_2\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"currency_2\",\"type\":\"int256\"}],\"name\":\"consumeLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"accrualAcquirer\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"accrualIssuing\",\"type\":\"int256\"}],\"name\":\"orgAccrual\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"msg\",\"type\":\"string\"}],\"name\":\"debugLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"length\",\"type\":\"int256\"}],\"name\":\"debugOrderLog\",\"type\":\"event\"}]";

    public static final TransactionDecoder transactionDecoder = new TransactionDecoder(ABI, BINARY);

    public static final String FUNC_CLEARCENTERINFO = "clearCenterInfo";

    public static final String FUNC_GETBANKAMOUNT = "getBankAmount";

    public static final String FUNC_SETDATA = "setData";

    public static final String FUNC_CHECKINFOMANAGER = "checkinfoManager";

    public static final String FUNC_DOTRANSACTION = "doTransaction";

    public static final String FUNC_GETCLEARINGRESULT = "getClearingResult";

    public static final String FUNC_MODIFYBANKCREDIT = "modifyBankCredit";

    public static final String FUNC_REGISTERORG = "registerOrg";

    public static final String FUNC_SETCHECKINFOMANAGER = "setCheckInfoManager";

    public static final String FUNC_MODIFYBANKAMOUNT = "modifyBankAmount";

    public static final String FUNC_SETMETAADDRESS = "setMetaAddress";

    public static final String FUNC_SETCLEARINGSTATUS = "setClearingStatus";

    public static final String FUNC_SETEXCHANGERATE = "setExchangeRate";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_ABI = "abi";

    public static final String FUNC_CLEARCENTERDATA = "clearCenterData";

    public static final String FUNC_SETINFO = "setInfo";

    public static final String FUNC_GETMETA = "getMeta";

    public static final String FUNC_GETEXCHANGERATE = "getExchangeRate";

    public static final String FUNC_SETTRANSFILETAG = "setTransFileTag";

    public static final String FUNC_UPDATECHECKCODESTATUS = "updateCheckCodeStatus";

    public static final String FUNC_GETCLEARINGSTATUS = "getClearingStatus";

    public static final Event TRANSRETLOG_EVENT = new Event("transRetLog", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
    ;

    public static final Event ACCOUNTBALANCETLOG_EVENT = new Event("accountBalancetLog", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
    ;

    public static final Event CONSUMELOG_EVENT = new Event("consumeLog", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
    ;

    public static final Event ORGACCRUAL_EVENT = new Event("orgAccrual", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
    ;

    public static final Event DEBUGLOG_EVENT = new Event("debugLog", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event DEBUGORDERLOG_EVENT = new Event("debugOrderLog", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    @Deprecated
    protected ClearCenter(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected ClearCenter(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected ClearCenter(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected ClearCenter(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static TransactionDecoder getTransactionDecoder() {
        return transactionDecoder;
    }

    public RemoteCall<String> clearCenterInfo() {
        final Function function = new Function(FUNC_CLEARCENTERINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> getBankAmount(BigInteger orgType, byte[] orgId) {
        final Function function = new Function(FUNC_GETBANKAMOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(orgType), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> setData(String addr) {
        final Function function = new Function(
                FUNC_SETDATA, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setData(String addr, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SETDATA, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setDataSeq(String addr) {
        final Function function = new Function(
                FUNC_SETDATA, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<String> getSetDataInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETDATA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public RemoteCall<String> checkinfoManager() {
        final Function function = new Function(FUNC_CHECKINFOMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> doTransaction(String orderAddr) {
        final Function function = new Function(
                FUNC_DOTRANSACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(orderAddr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void doTransaction(String orderAddr, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_DOTRANSACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(orderAddr)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String doTransactionSeq(String orderAddr) {
        final Function function = new Function(
                FUNC_DOTRANSACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(orderAddr)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<String> getDoTransactionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DOTRANSACTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<BigInteger> getDoTransactionOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_DOTRANSACTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public RemoteCall<Tuple3<BigInteger, BigInteger, BigInteger>> getClearingResult(BigInteger orgType, byte[] orgId, BigInteger clearCode) {
        final Function function = new Function(FUNC_GETCLEARINGRESULT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(orgType), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(clearCode)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
        return new RemoteCall<Tuple3<BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple3<BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> modifyBankCredit(BigInteger orgType, byte[] orgID, BigInteger credit) {
        final Function function = new Function(
                FUNC_MODIFYBANKCREDIT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(orgType), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgID), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(credit)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void modifyBankCredit(BigInteger orgType, byte[] orgID, BigInteger credit, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_MODIFYBANKCREDIT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(orgType), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgID), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(credit)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String modifyBankCreditSeq(BigInteger orgType, byte[] orgID, BigInteger credit) {
        final Function function = new Function(
                FUNC_MODIFYBANKCREDIT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(orgType), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgID), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(credit)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple3<BigInteger, byte[], BigInteger> getModifyBankCreditInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MODIFYBANKCREDIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple3<BigInteger, byte[], BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (byte[]) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> registerOrg(BigInteger orgType, byte[] orgId, String orgAddr, BigInteger balance, BigInteger credit, BigInteger currencyBase) {
        final Function function = new Function(
                FUNC_REGISTERORG, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(orgType), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(orgAddr), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(balance), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(credit), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(currencyBase)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void registerOrg(BigInteger orgType, byte[] orgId, String orgAddr, BigInteger balance, BigInteger credit, BigInteger currencyBase, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERORG, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(orgType), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(orgAddr), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(balance), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(credit), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(currencyBase)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String registerOrgSeq(BigInteger orgType, byte[] orgId, String orgAddr, BigInteger balance, BigInteger credit, BigInteger currencyBase) {
        final Function function = new Function(
                FUNC_REGISTERORG, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(orgType), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(orgAddr), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(balance), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(credit), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(currencyBase)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple6<BigInteger, byte[], String, BigInteger, BigInteger, BigInteger> getRegisterOrgInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTERORG, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple6<BigInteger, byte[], String, BigInteger, BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (byte[]) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> setCheckInfoManager(String addr) {
        final Function function = new Function(
                FUNC_SETCHECKINFOMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setCheckInfoManager(String addr, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SETCHECKINFOMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setCheckInfoManagerSeq(String addr) {
        final Function function = new Function(
                FUNC_SETCHECKINFOMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<String> getSetCheckInfoManagerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETCHECKINFOMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> modifyBankAmount(BigInteger orgType, byte[] orgID, BigInteger balance) {
        final Function function = new Function(
                FUNC_MODIFYBANKAMOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(orgType), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgID), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(balance)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void modifyBankAmount(BigInteger orgType, byte[] orgID, BigInteger balance, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_MODIFYBANKAMOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(orgType), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgID), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(balance)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String modifyBankAmountSeq(BigInteger orgType, byte[] orgID, BigInteger balance) {
        final Function function = new Function(
                FUNC_MODIFYBANKAMOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(orgType), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgID), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(balance)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple3<BigInteger, byte[], BigInteger> getModifyBankAmountInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MODIFYBANKAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple3<BigInteger, byte[], BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (byte[]) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> setMetaAddress(String meta) {
        final Function function = new Function(
                FUNC_SETMETAADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(meta)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setMetaAddress(String meta, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SETMETAADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(meta)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setMetaAddressSeq(String meta) {
        final Function function = new Function(
                FUNC_SETMETAADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(meta)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<String> getSetMetaAddressInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMETAADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> setClearingStatus(BigInteger lastCheckCode, BigInteger retStatus, byte[] walletOwnerOrg, BigInteger totalRmbAmt, BigInteger totalTxAmt, BigInteger currency, BigInteger wbBalance, BigInteger timestamp) {
        final Function function = new Function(
                FUNC_SETCLEARINGSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(lastCheckCode), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(retStatus), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(walletOwnerOrg), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(totalRmbAmt), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(totalTxAmt), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(currency), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(wbBalance), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(timestamp)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setClearingStatus(BigInteger lastCheckCode, BigInteger retStatus, byte[] walletOwnerOrg, BigInteger totalRmbAmt, BigInteger totalTxAmt, BigInteger currency, BigInteger wbBalance, BigInteger timestamp, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SETCLEARINGSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(lastCheckCode), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(retStatus), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(walletOwnerOrg), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(totalRmbAmt), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(totalTxAmt), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(currency), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(wbBalance), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(timestamp)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setClearingStatusSeq(BigInteger lastCheckCode, BigInteger retStatus, byte[] walletOwnerOrg, BigInteger totalRmbAmt, BigInteger totalTxAmt, BigInteger currency, BigInteger wbBalance, BigInteger timestamp) {
        final Function function = new Function(
                FUNC_SETCLEARINGSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(lastCheckCode), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(retStatus), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(walletOwnerOrg), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(totalRmbAmt), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(totalTxAmt), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(currency), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(wbBalance), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(timestamp)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple8<BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> getSetClearingStatusInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETCLEARINGSTATUS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple8<BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (byte[]) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue(), 
                (BigInteger) results.get(6).getValue(), 
                (BigInteger) results.get(7).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> setExchangeRate(BigInteger currency, BigInteger fxRate, BigInteger refundFxRate, BigInteger exTimeStamp, BigInteger currencyUnit, List<BigInteger> exDataArr, List<byte[]> exDataStr0) {
        final Function function = new Function(
                FUNC_SETEXCHANGERATE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(currency), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(fxRate), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(refundFxRate), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(exTimeStamp), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(currencyUnit), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray3<org.fisco.bcos.web3j.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(exDataArr, org.fisco.bcos.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray3<org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(exDataStr0, org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setExchangeRate(BigInteger currency, BigInteger fxRate, BigInteger refundFxRate, BigInteger exTimeStamp, BigInteger currencyUnit, List<BigInteger> exDataArr, List<byte[]> exDataStr0, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SETEXCHANGERATE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(currency), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(fxRate), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(refundFxRate), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(exTimeStamp), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(currencyUnit), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray3<org.fisco.bcos.web3j.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(exDataArr, org.fisco.bcos.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray3<org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(exDataStr0, org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setExchangeRateSeq(BigInteger currency, BigInteger fxRate, BigInteger refundFxRate, BigInteger exTimeStamp, BigInteger currencyUnit, List<BigInteger> exDataArr, List<byte[]> exDataStr0) {
        final Function function = new Function(
                FUNC_SETEXCHANGERATE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(currency), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(fxRate), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(refundFxRate), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(exTimeStamp), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(currencyUnit), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray3<org.fisco.bcos.web3j.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(exDataArr, org.fisco.bcos.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray3<org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(exDataStr0, org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, List<BigInteger>, List<byte[]>> getSetExchangeRateInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETEXCHANGERATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<StaticArray3<Uint256>>() {}, new TypeReference<StaticArray3<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, List<BigInteger>, List<byte[]>>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                convertToNative((List<Uint256>) results.get(5).getValue()), 
                convertToNative((List<Bytes32>) results.get(6).getValue())
                );
    }

    public RemoteCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> abi() {
        final Function function = new Function(FUNC_ABI, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> clearCenterData() {
        final Function function = new Function(FUNC_CLEARCENTERDATA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> setInfo(String addr) {
        final Function function = new Function(
                FUNC_SETINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setInfo(String addr, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SETINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setInfoSeq(String addr) {
        final Function function = new Function(
                FUNC_SETINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<String> getSetInfoInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public RemoteCall<Tuple3<String, String, String>> getMeta() {
        final Function function = new Function(FUNC_GETMETA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        return new RemoteCall<Tuple3<String, String, String>>(
                new Callable<Tuple3<String, String, String>>() {
                    @Override
                    public Tuple3<String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, List<BigInteger>, List<byte[]>>> getExchangeRate(BigInteger currency) {
        final Function function = new Function(FUNC_GETEXCHANGERATE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(currency)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
        return new RemoteCall<Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, List<BigInteger>, List<byte[]>>>(
                new Callable<Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, List<BigInteger>, List<byte[]>>>() {
                    @Override
                    public Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, List<BigInteger>, List<byte[]>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, List<BigInteger>, List<byte[]>>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                convertToNative((List<Uint256>) results.get(5).getValue()), 
                                convertToNative((List<Bytes32>) results.get(6).getValue()));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> setTransFileTag(BigInteger clearCode, BigInteger fileTagResult, byte[] filePath) {
        final Function function = new Function(
                FUNC_SETTRANSFILETAG, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(clearCode), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(fileTagResult), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(filePath)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setTransFileTag(BigInteger clearCode, BigInteger fileTagResult, byte[] filePath, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SETTRANSFILETAG, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(clearCode), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(fileTagResult), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(filePath)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setTransFileTagSeq(BigInteger clearCode, BigInteger fileTagResult, byte[] filePath) {
        final Function function = new Function(
                FUNC_SETTRANSFILETAG, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(clearCode), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(fileTagResult), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(filePath)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple3<BigInteger, BigInteger, byte[]> getSetTransFileTagInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETTRANSFILETAG, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple3<BigInteger, BigInteger, byte[]>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (byte[]) results.get(2).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> updateCheckCodeStatus(byte[] orgId, BigInteger checkCode) {
        final Function function = new Function(
                FUNC_UPDATECHECKCODESTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(checkCode)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void updateCheckCodeStatus(byte[] orgId, BigInteger checkCode, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_UPDATECHECKCODESTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(checkCode)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String updateCheckCodeStatusSeq(byte[] orgId, BigInteger checkCode) {
        final Function function = new Function(
                FUNC_UPDATECHECKCODESTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(checkCode)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<byte[], BigInteger> getUpdateCheckCodeStatusInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATECHECKCODESTATUS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<byte[], BigInteger>(

                (byte[]) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public RemoteCall<Tuple7<BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> getClearingStatus(BigInteger checkCode) {
        final Function function = new Function(FUNC_GETCLEARINGSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(checkCode)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
        return new RemoteCall<Tuple7<BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple7<BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple7<BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public List<TransRetLogEventResponse> getTransRetLogEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSRETLOG_EVENT, transactionReceipt);
        ArrayList<TransRetLogEventResponse> responses = new ArrayList<TransRetLogEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransRetLogEventResponse typedResponse = new TransRetLogEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oper = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.check_code = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registertransRetLogEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(TRANSRETLOG_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registertransRetLogEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(TRANSRETLOG_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<AccountBalancetLogEventResponse> getAccountBalancetLogEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ACCOUNTBALANCETLOG_EVENT, transactionReceipt);
        ArrayList<AccountBalancetLogEventResponse> responses = new ArrayList<AccountBalancetLogEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AccountBalancetLogEventResponse typedResponse = new AccountBalancetLogEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.balance = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registeraccountBalancetLogEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(ACCOUNTBALANCETLOG_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registeraccountBalancetLogEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(ACCOUNTBALANCETLOG_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<ConsumeLogEventResponse> getConsumeLogEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CONSUMELOG_EVENT, transactionReceipt);
        ArrayList<ConsumeLogEventResponse> responses = new ArrayList<ConsumeLogEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ConsumeLogEventResponse typedResponse = new ConsumeLogEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tx_amt_1 = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.currency_1 = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tx_amt_2 = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.currency_2 = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerconsumeLogEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(CONSUMELOG_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerconsumeLogEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(CONSUMELOG_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<OrgAccrualEventResponse> getOrgAccrualEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ORGACCRUAL_EVENT, transactionReceipt);
        ArrayList<OrgAccrualEventResponse> responses = new ArrayList<OrgAccrualEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OrgAccrualEventResponse typedResponse = new OrgAccrualEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.accrualAcquirer = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.accrualIssuing = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerorgAccrualEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(ORGACCRUAL_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerorgAccrualEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(ORGACCRUAL_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<DebugLogEventResponse> getDebugLogEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEBUGLOG_EVENT, transactionReceipt);
        ArrayList<DebugLogEventResponse> responses = new ArrayList<DebugLogEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DebugLogEventResponse typedResponse = new DebugLogEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.msg = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerdebugLogEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(DEBUGLOG_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerdebugLogEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(DEBUGLOG_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<DebugOrderLogEventResponse> getDebugOrderLogEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEBUGORDERLOG_EVENT, transactionReceipt);
        ArrayList<DebugOrderLogEventResponse> responses = new ArrayList<DebugOrderLogEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DebugOrderLogEventResponse typedResponse = new DebugOrderLogEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.length = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerdebugOrderLogEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(DEBUGORDERLOG_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerdebugOrderLogEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(DEBUGORDERLOG_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    @Deprecated
    public static ClearCenter load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new ClearCenter(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static ClearCenter load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new ClearCenter(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static ClearCenter load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new ClearCenter(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static ClearCenter load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new ClearCenter(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<ClearCenter> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String name, String abi, String infoAddr, String dataAddr, String checkInfoAddr) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(abi), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(infoAddr), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(dataAddr), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(checkInfoAddr)));
        return deployRemoteCall(ClearCenter.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<ClearCenter> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String name, String abi, String infoAddr, String dataAddr, String checkInfoAddr) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(abi), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(infoAddr), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(dataAddr), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(checkInfoAddr)));
        return deployRemoteCall(ClearCenter.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<ClearCenter> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String name, String abi, String infoAddr, String dataAddr, String checkInfoAddr) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(abi), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(infoAddr), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(dataAddr), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(checkInfoAddr)));
        return deployRemoteCall(ClearCenter.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<ClearCenter> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String name, String abi, String infoAddr, String dataAddr, String checkInfoAddr) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(abi), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(infoAddr), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(dataAddr), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(checkInfoAddr)));
        return deployRemoteCall(ClearCenter.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class TransRetLogEventResponse {
        public Log log;

        public String oper;

        public BigInteger status;

        public BigInteger check_code;
    }

    public static class AccountBalancetLogEventResponse {
        public Log log;

        public BigInteger status;

        public BigInteger balance;
    }

    public static class ConsumeLogEventResponse {
        public Log log;

        public BigInteger tx_amt_1;

        public BigInteger currency_1;

        public BigInteger tx_amt_2;

        public BigInteger currency_2;
    }

    public static class OrgAccrualEventResponse {
        public Log log;

        public BigInteger accrualAcquirer;

        public BigInteger accrualIssuing;
    }

    public static class DebugLogEventResponse {
        public Log log;

        public String msg;
    }

    public static class DebugOrderLogEventResponse {
        public Log log;

        public BigInteger length;
    }
}
