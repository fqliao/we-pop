package cn.webank.blockchain.contracts.web3j;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.channel.event.filter.EventLogPushWithDecodeCallback;
import org.fisco.bcos.web3j.abi.EventEncoder;
import org.fisco.bcos.web3j.abi.FunctionEncoder;
import org.fisco.bcos.web3j.abi.FunctionReturnDecoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.Event;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.Log;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple1;
import org.fisco.bcos.web3j.tuples.generated.Tuple2;
import org.fisco.bcos.web3j.tuples.generated.Tuple3;
import org.fisco.bcos.web3j.tuples.generated.Tuple7;
import org.fisco.bcos.web3j.tuples.generated.Tuple8;
import org.fisco.bcos.web3j.tuples.generated.Tuple9;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;
import org.fisco.bcos.web3j.tx.txdecode.TransactionDecoder;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class CheckInfoManager extends Contract {
    public static String BINARY = "60806040523480156200001157600080fd5b50604051620040833803806200408383398101806040528101908080518201929190602001805182019291906020018051820192919060200180518201929190505050838381600090805190602001906200006e929190620001df565b50806001908051906020019062000087929190620001df565b50505081816200009662000266565b808060200180602001838103835285818151815260200191508051906020019080838360005b83811015620000d9578082015181840152602081019050620000bc565b50505050905090810190601f168015620001075780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b838110156200014257808201518184015260208101905062000125565b50505050905090810190601f168015620001705780820380516001836020036101000a031916815260200191505b50945050505050604051809103906000f08015801562000194573d6000803e3d6000fd5b50600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050506200029f565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200022257805160ff191683800117855562000253565b8280016001018555821562000253579182015b828111156200025257825182559160200191906001019062000235565b5b50905062000262919062000277565b5090565b604051610739806200394a83390190565b6200029c91905b80821115620002985760008160009055506001016200027e565b5090565b90565b61369b80620002af6000396000f3006080604052600436106200013f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314620001445780631166b54b14620001da578063290782fb14620002205780632d9599f2146200029e5780633227aaa514620002cc578063343aace114620003265780634394ec0b14620003a457806346a948e014620003f657806348870630146200043a5780635aec3ec814620004d05780635cea89b6146200055b5780635d8af65b14620005d95780638204a88e146200062b5780638eaa730b1462000673578063a79af2ce14620006a1578063b2d577e514620007d9578063baf87c5a1462000857578063c8e2b4dd14620008d5578063ca2126a91462000905578063ccbac60d146200098d578063d64232c31462000a11578063f9c1df3d1462000a63575b600080fd5b3480156200015157600080fd5b506200015c62000aa7565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156200019e57808201518184015260208101905062000181565b50505050905090810190601f168015620001cc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015620001e757600080fd5b506200021e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062000b49565b005b3480156200022d57600080fd5b506200025c60048036038101908080359060200190929190803560001916906020019092919050505062000b8d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015620002ab57600080fd5b50620002b662000ba3565b6040518082815260200191505060405180910390f35b348015620002d957600080fd5b50620002e462000bad565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156200033357600080fd5b506200036260048036038101908080359060200190929190803560001916906020019092919050505062000bd3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015620003b157600080fd5b50620003e060048036038101908080356000191690602001909291908035906020019092919050505062000be9565b6040518082815260200191505060405180910390f35b3480156200040357600080fd5b50620004246004803603810190808035906020019092919050505062000ca0565b6040518082815260200191505060405180910390f35b3480156200044757600080fd5b506200045262000cc4565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156200049457808201518184015260208101905062000477565b50505050905090810190601f168015620004c25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015620004dd57600080fd5b506200050c60048036038101908080356000191690602001909291908035906020019092919050505062000d66565b6040518089815260200188815260200187600019166000191681526020018681526020018581526020018481526020018381526020018281526020019850505050505050505060405180910390f35b3480156200056857600080fd5b5062000597600480360381019080803590602001909291908035600019169060200190929190505050620012b0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015620005e657600080fd5b50620006156004803603810190808035600019169060200190929190803590602001909291905050506200130c565b6040518082815260200191505060405180910390f35b3480156200063857600080fd5b5062000671600480360381019080803560001916906020019092919080359060200190929190803590602001909291905050506200140f565b005b3480156200068057600080fd5b506200068b620014a8565b6040518082815260200191505060405180910390f35b348015620006ae57600080fd5b50620006b9620014b5565b6040518080602001806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838103835286818151815260200191508051906020019080838360005b838110156200073157808201518184015260208101905062000714565b50505050905090810190601f1680156200075f5780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b838110156200079a5780820151818401526020810190506200077d565b50505050905090810190601f168015620007c85780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b348015620007e657600080fd5b50620008156004803603810190808035906020019092919080356000191690602001909291905050506200162b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156200086457600080fd5b5062000893600480360381019080803590602001909291908035600019169060200190929190505050620018a8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015620008e257600080fd5b506200090360048036038101908080359060200190929190505050620018be565b005b3480156200091257600080fd5b506200098b6004803603810190808035600019169060200190929190803590602001909291908035906020019092919080356000191690602001909291908035906020019092919080359060200190929190803590602001909291908035906020019092919080359060200190929190505050620018f4565b005b3480156200099a57600080fd5b50620009c960048036038101908080356000191690602001909291908035906020019092919050505062001d85565b60405180888152602001876000191660001916815260200186815260200185815260200184815260200183815260200182815260200197505050505050505060405180910390f35b34801562000a1e57600080fd5b5062000a4d6004803603810190808035600019169060200190929190803590602001909291905050506200229d565b6040518082815260200191505060405180910390f35b34801562000a7057600080fd5b5062000a91600480360381019080803590602001909291905050506200241f565b6040518082815260200191505060405180910390f35b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801562000b415780601f1062000b155761010080835404028352916020019162000b41565b820191906000526020600020905b81548152906001019060200180831162000b2357829003601f168201915b505050505081565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600062000b9b83836200162b565b905092915050565b6000600354905090565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600062000be183836200162b565b905092915050565b600062000bf7828462000b8d565b73ffffffffffffffffffffffffffffffffffffffff1663200d2ed26040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801562000c5b57600080fd5b505af115801562000c70573d6000803e3d6000fd5b505050506040513d602081101562000c8757600080fd5b8101908080519060200190929190505050905092915050565b600060058281548110151562000cb257fe5b90600052602060002001549050919050565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801562000d5e5780601f1062000d325761010080835404028352916020019162000d5e565b820191906000526020600020905b81548152906001019060200180831162000d4057829003601f168201915b505050505081565b600080600080600080600080600062000d808a8c62000b8d565b90508073ffffffffffffffffffffffffffffffffffffffff1663200d2ed26040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801562000de757600080fd5b505af115801562000dfc573d6000803e3d6000fd5b505050506040513d602081101562000e1357600080fd5b81019080805190602001909291905050508173ffffffffffffffffffffffffffffffffffffffff16639d796bdb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801562000e8957600080fd5b505af115801562000e9e573d6000803e3d6000fd5b505050506040513d602081101562000eb557600080fd5b81019080805190602001909291905050508273ffffffffffffffffffffffffffffffffffffffff1663548ee6e86040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801562000f2b57600080fd5b505af115801562000f40573d6000803e3d6000fd5b505050506040513d602081101562000f5757600080fd5b81019080805190602001909291905050508373ffffffffffffffffffffffffffffffffffffffff16639028e1e76040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801562000fcd57600080fd5b505af115801562000fe2573d6000803e3d6000fd5b505050506040513d602081101562000ff957600080fd5b81019080805190602001909291905050508473ffffffffffffffffffffffffffffffffffffffff16634c616a816040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200106f57600080fd5b505af115801562001084573d6000803e3d6000fd5b505050506040513d60208110156200109b57600080fd5b81019080805190602001909291905050508573ffffffffffffffffffffffffffffffffffffffff1663e5a6b10f6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200111157600080fd5b505af115801562001126573d6000803e3d6000fd5b505050506040513d60208110156200113d57600080fd5b81019080805190602001909291905050508673ffffffffffffffffffffffffffffffffffffffff1663d2dcce806040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015620011b357600080fd5b505af1158015620011c8573d6000803e3d6000fd5b505050506040513d6020811015620011df57600080fd5b81019080805190602001909291905050508773ffffffffffffffffffffffffffffffffffffffff1663b80777ea6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200125557600080fd5b505af11580156200126a573d6000803e3d6000fd5b505050506040513d60208110156200128157600080fd5b810190808051906020019092919050505098509850985098509850985098509850509295985092959890939650565b600080600460008581526020019081526020016000206000846000191660001916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508091505092915050565b60008060006200131d8486620012b0565b91508190508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff16141562001362576002925062001407565b8073ffffffffffffffffffffffffffffffffffffffff1663a80591906040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015620013c757600080fd5b505af1158015620013dc573d6000803e3d6000fd5b505050506040513d6020811015620013f357600080fd5b810190808051906020019092919050505092505b505092915050565b6200141b828462000b8d565b73ffffffffffffffffffffffffffffffffffffffff166317bc269b826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b1580156200148a57600080fd5b505af11580156200149f573d6000803e3d6000fd5b50505050505050565b6000600580549050905090565b6060806000806001600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015620015795780601f106200154d5761010080835404028352916020019162001579565b820191906000526020600020905b8154815290600101906020018083116200155b57829003601f168201915b50505050509250818054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015620016195780601f10620015ed5761010080835404028352916020019162001619565b820191906000526020600020905b815481529060010190602001808311620015fb57829003601f168201915b50505050509150925092509250909192565b600080600460008581526020019081526020016000206000846000191660001916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1614156200189e57600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16620016ca62002443565b808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050604051809103906000f0801580156200171d573d6000803e3d6000fd5b5090508073ffffffffffffffffffffffffffffffffffffffff1663c8e2b4dd856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b1580156200179057600080fd5b505af1158015620017a5573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16629d6e5160016040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b1580156200181957600080fd5b505af11580156200182e573d6000803e3d6000fd5b5050505080600460008681526020019081526020016000206000856000191660001916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b8091505092915050565b6000620018b683836200162b565b905092915050565b80600381905550600581908060018154018082558091505090600182039060005260206000200160009091929091909150555050565b600062001902898b62000b8d565b90508073ffffffffffffffffffffffffffffffffffffffff16639295cd8d8a6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b1580156200197457600080fd5b505af115801562001989573d6000803e3d6000fd5b505050506040513d6020811015620019a057600080fd5b8101908080519060200190929190505050508073ffffffffffffffffffffffffffffffffffffffff166317bc269b896040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b15801562001a2257600080fd5b505af115801562001a37573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663ca6c87a8886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050600060405180830381600087803b15801562001ab357600080fd5b505af115801562001ac8573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663793740ed876040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b15801562001b3c57600080fd5b505af115801562001b51573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638b6959b7866040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b15801562001bc557600080fd5b505af115801562001bda573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663ea8d2720856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b15801562001c4e57600080fd5b505af115801562001c63573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff166350f43b8d846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b15801562001cd757600080fd5b505af115801562001cec573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16636804e275836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b15801562001d6057600080fd5b505af115801562001d75573d6000803e3d6000fd5b5050505050505050505050505050565b600080600080600080600080600062001d9f8a8c620012b0565b91508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff16141562001e0f57614fb160008060008060008595506000949392919084945083935082925081915080905098509850985098509850985098506200228f565b8190508073ffffffffffffffffffffffffffffffffffffffff1663200d2ed26040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801562001e7757600080fd5b505af115801562001e8c573d6000803e3d6000fd5b505050506040513d602081101562001ea357600080fd5b81019080805190602001909291905050508173ffffffffffffffffffffffffffffffffffffffff1663548ee6e86040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801562001f1957600080fd5b505af115801562001f2e573d6000803e3d6000fd5b505050506040513d602081101562001f4557600080fd5b81019080805190602001909291905050508273ffffffffffffffffffffffffffffffffffffffff16639028e1e76040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801562001fbb57600080fd5b505af115801562001fd0573d6000803e3d6000fd5b505050506040513d602081101562001fe757600080fd5b81019080805190602001909291905050508373ffffffffffffffffffffffffffffffffffffffff16634c616a816040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200205d57600080fd5b505af115801562002072573d6000803e3d6000fd5b505050506040513d60208110156200208957600080fd5b81019080805190602001909291905050508473ffffffffffffffffffffffffffffffffffffffff1663e5a6b10f6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015620020ff57600080fd5b505af115801562002114573d6000803e3d6000fd5b505050506040513d60208110156200212b57600080fd5b81019080805190602001909291905050508573ffffffffffffffffffffffffffffffffffffffff1663d2dcce806040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015620021a157600080fd5b505af1158015620021b6573d6000803e3d6000fd5b505050506040513d6020811015620021cd57600080fd5b81019080805190602001909291905050508673ffffffffffffffffffffffffffffffffffffffff1663b80777ea6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200224357600080fd5b505af115801562002258573d6000803e3d6000fd5b505050506040513d60208110156200226f57600080fd5b810190808051906020019092919050505098509850985098509850985098505b505092959891949750929550565b6000806000806000620022b18688620012b0565b93508392508373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff1614156200239257620022f886886200162b565b50620023058688620012b0565b91508190508073ffffffffffffffffffffffffffffffffffffffff16639f7314f96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b1580156200236f57600080fd5b505af115801562002384573d6000803e3d6000fd5b505050506000945062002415565b8273ffffffffffffffffffffffffffffffffffffffff16639f7314f96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b158015620023f757600080fd5b505af11580156200240c573d6000803e3d6000fd5b50505050600094505b5050505092915050565b6005818154811015156200242f57fe5b906000526020600020016000915090505481565b60405161121b806200245583390190560060806040526000600e553480156200001657600080fd5b506040516020806200121b8339810180604052810190808051906020019092919050505060206040519081016040528060008152506020604051908101604052806000815250816000908051906020019062000074929190620000f5565b5080600190805190602001906200008d929190620000f5565b505050620000aa81620000b1640100000000026401000000009004565b50620001a4565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200013857805160ff191683800117855562000169565b8280016001018555821562000169579182015b82811115620001685782518255916020019190600101906200014b565b5b5090506200017891906200017c565b5090565b620001a191905b808211156200019d57600081600090555060010162000183565b5090565b90565b61106780620001b46000396000f30060806040526004361061020d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680629d6e5114610212578062c9f9f11461023f57806306fdde031461026c5780630902f72f146102fc57806310ae4c8d1461032d578063112ab75c146103585780631166b54b1461039957806317bc269b146103dc578063200d2ed214610409578063341f141d14610434578063422347ae1461045f578063488706301461048c5780634c616a811461051c57806350f43b8d146105475780635365f1d314610574578063548ee6e81461059f5780635cbd7ceb146105d25780636804e275146105fd5780636cdd94911461062a57806376f75e7f14610657578063793740ed146106a057806381483a7e146106cd5780638ad3af68146106f85780638b6959b7146107255780639028e1e7146107525780639295cd8d1461077d5780639d796bdb146107be5780639f7314f9146107e9578063a79af2ce14610800578063a80591901461092f578063a83754ad1461095a578063b788266c1461098b578063b80777ea146109b8578063c5c0c030146109e3578063c8e2b4dd14610a0e578063ca6c87a814610a3b578063d2dcce8014610a6c578063d7e40fa414610a97578063df9c36ba14610ac2578063e5a6b10f14610af5578063ea8d272014610b20578063f8fa3eab14610b4d578063fdba57fb14610b78575b600080fd5b34801561021e57600080fd5b5061023d60048036038101908080359060200190929190505050610ba3565b005b34801561024b57600080fd5b5061026a60048036038101908080359060200190929190505050610bad565b005b34801561027857600080fd5b50610281610bb7565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102c15780820151818401526020810190506102a6565b50505050905090810190601f1680156102ee5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561030857600080fd5b5061032b6004803603810190808035600019169060200190929190505050610c55565b005b34801561033957600080fd5b50610342610c8a565b6040518082815260200191505060405180910390f35b34801561036457600080fd5b5061038360048036038101908080359060200190929190505050610c90565b6040518082815260200191505060405180910390f35b3480156103a557600080fd5b506103da600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610cb3565b005b3480156103e857600080fd5b5061040760048036038101908080359060200190929190505050610cf7565b005b34801561041557600080fd5b5061041e610d01565b6040518082815260200191505060405180910390f35b34801561044057600080fd5b50610449610d07565b6040518082815260200191505060405180910390f35b34801561046b57600080fd5b5061048a60048036038101908080359060200190929190505050610d0d565b005b34801561049857600080fd5b506104a1610d17565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104e15780820151818401526020810190506104c6565b50505050905090810190601f16801561050e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561052857600080fd5b50610531610db5565b6040518082815260200191505060405180910390f35b34801561055357600080fd5b5061057260048036038101908080359060200190929190505050610dbb565b005b34801561058057600080fd5b50610589610dc5565b6040518082815260200191505060405180910390f35b3480156105ab57600080fd5b506105b4610dcb565b60405180826000191660001916815260200191505060405180910390f35b3480156105de57600080fd5b506105e7610dd1565b6040518082815260200191505060405180910390f35b34801561060957600080fd5b5061062860048036038101908080359060200190929190505050610dde565b005b34801561063657600080fd5b5061065560048036038101908080359060200190929190505050610de8565b005b34801561066357600080fd5b5061068260048036038101908080359060200190929190505050610df2565b60405180826000191660001916815260200191505060405180910390f35b3480156106ac57600080fd5b506106cb60048036038101908080359060200190929190505050610e15565b005b3480156106d957600080fd5b506106e2610e1f565b6040518082815260200191505060405180910390f35b34801561070457600080fd5b5061072360048036038101908080359060200190929190505050610e25565b005b34801561073157600080fd5b5061075060048036038101908080359060200190929190505050610e2f565b005b34801561075e57600080fd5b50610767610e39565b6040518082815260200191505060405180910390f35b34801561078957600080fd5b506107a860048036038101908080359060200190929190505050610e3f565b6040518082815260200191505060405180910390f35b3480156107ca57600080fd5b506107d3610e4d565b6040518082815260200191505060405180910390f35b3480156107f557600080fd5b506107fe610e53565b005b34801561080c57600080fd5b50610815610e5d565b6040518080602001806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838103835286818151815260200191508051906020019080838360005b8381101561088b578082015181840152602081019050610870565b50505050905090810190601f1680156108b85780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b838110156108f15780820151818401526020810190506108d6565b50505050905090810190601f16801561091e5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b34801561093b57600080fd5b50610944610fcb565b6040518082815260200191505060405180910390f35b34801561096657600080fd5b506109896004803603810190808035600019169060200190929190505050610fd1565b005b34801561099757600080fd5b506109b660048036038101908080359060200190929190505050610fdf565b005b3480156109c457600080fd5b506109cd610fe9565b6040518082815260200191505060405180910390f35b3480156109ef57600080fd5b506109f8610fef565b6040518082815260200191505060405180910390f35b348015610a1a57600080fd5b50610a3960048036038101908080359060200190929190505050610ff5565b005b348015610a4757600080fd5b50610a6a6004803603810190808035600019169060200190929190505050610fff565b005b348015610a7857600080fd5b50610a8161100d565b6040518082815260200191505060405180910390f35b348015610aa357600080fd5b50610aac611013565b6040518082815260200191505060405180910390f35b348015610ace57600080fd5b50610ad7611019565b60405180826000191660001916815260200191505060405180910390f35b348015610b0157600080fd5b50610b0a61101f565b6040518082815260200191505060405180910390f35b348015610b2c57600080fd5b50610b4b60048036038101908080359060200190929190505050611025565b005b348015610b5957600080fd5b50610b6261102f565b6040518082815260200191505060405180910390f35b348015610b8457600080fd5b50610b8d611035565b6040518082815260200191505060405180910390f35b8060078190555050565b8060098190555050565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c4d5780601f10610c2257610100808354040283529160200191610c4d565b820191906000526020600020905b815481529060010190602001808311610c3057829003601f168201915b505050505081565b600581908060018154018082558091505090600182039060005260206000200160009091929091909150906000191690555050565b60035481565b601681815481101515610c9f57fe5b906000526020600020016000915090505481565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b80600b8190555050565b600b5481565b60065481565b8060088190555050565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610dad5780601f10610d8257610100808354040283529160200191610dad565b820191906000526020600020905b815481529060010190602001808311610d9057829003601f168201915b505050505081565b60125481565b8060148190555050565b600e5481565b60105481565b6000600580549050905090565b8060158190555050565b80600a8190555050565b600581815481101515610e0157fe5b906000526020600020016000915090505481565b8060118190555050565b60075481565b8060068190555050565b8060128190555050565b60115481565b600081600f81905550919050565b600f5481565b6001600481905550565b6060806000806001600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f1d5780601f10610ef257610100808354040283529160200191610f1d565b820191906000526020600020905b815481529060010190602001808311610f0057829003601f168201915b50505050509250818054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610fb95780601f10610f8e57610100808354040283529160200191610fb9565b820191906000526020600020905b815481529060010190602001808311610f9c57829003601f168201915b50505050509150925092509250909192565b60045481565b80600d816000191690555050565b80600c8190555050565b60155481565b60085481565b8060038190555050565b806010816000191690555050565b60145481565b600a5481565b600d5481565b60135481565b8060138190555050565b60095481565b600c54815600a165627a7a72305820a3522b9c10292d1f5d3fd7bca99d6edc309b393d6f2f4460caef0a0661f50a9f0029a165627a7a72305820a25f3b5654280d719aa9bec0a3446a25652a360f8b38fd10305b3a812e8211a00029608060405234801561001057600080fd5b5060405161073938038061073983398101806040528101908080518201929190602001805182019291905050508160009080519060200190610053929190610072565b50806001908051906020019061006a929190610072565b505050610117565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100b357805160ff19168380011785556100e1565b828001600101855582156100e1579182015b828111156100e05782518255916020019190600101906100c5565b5b5090506100ee91906100f2565b5090565b61011491905b808211156101105760008160009055506001016100f8565b5090565b90565b610613806101266000396000f300608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100675780631166b54b146100f7578063488706301461013a578063a79af2ce146101ca575b600080fd5b34801561007357600080fd5b5061007c6102f9565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100bc5780820151818401526020810190506100a1565b50505050905090810190601f1680156100e95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561010357600080fd5b50610138600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610397565b005b34801561014657600080fd5b5061014f6103db565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561018f578082015181840152602081019050610174565b50505050905090810190601f1680156101bc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101d657600080fd5b506101df610479565b6040518080602001806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838103835286818151815260200191508051906020019080838360005b8381101561025557808201518184015260208101905061023a565b50505050905090810190601f1680156102825780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b838110156102bb5780820151818401526020810190506102a0565b50505050905090810190601f1680156102e85780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561038f5780601f106103645761010080835404028352916020019161038f565b820191906000526020600020905b81548152906001019060200180831161037257829003601f168201915b505050505081565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104715780601f1061044657610100808354040283529160200191610471565b820191906000526020600020905b81548152906001019060200180831161045457829003601f168201915b505050505081565b6060806000806001600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105395780601f1061050e57610100808354040283529160200191610539565b820191906000526020600020905b81548152906001019060200180831161051c57829003601f168201915b50505050509250818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105d55780601f106105aa576101008083540402835291602001916105d5565b820191906000526020600020905b8154815290600101906020018083116105b857829003601f168201915b505050505091509250925092509091925600a165627a7a72305820449e74236851d64fbc4f157a2b653a3989de77ab6010f0dd09e3269d7c4dba510029";

    public static final String ABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"meta\",\"type\":\"address\"}],\"name\":\"setMetaAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"check_code\",\"type\":\"int256\"},{\"name\":\"org_id\",\"type\":\"bytes32\"}],\"name\":\"getClearCenterCheckInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentCheckCode\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"check_info_meta\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"check_code\",\"type\":\"int256\"},{\"name\":\"org_id\",\"type\":\"bytes32\"}],\"name\":\"getIssueBankCheckInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"orgId\",\"type\":\"bytes32\"},{\"name\":\"checkCode\",\"type\":\"int256\"}],\"name\":\"getOrgCheckStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"getCheckCodeByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"abi\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"orgId\",\"type\":\"bytes32\"},{\"name\":\"checkCode\",\"type\":\"int256\"}],\"name\":\"getAllOrgCheckStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"check_code\",\"type\":\"int256\"},{\"name\":\"org_id\",\"type\":\"bytes32\"}],\"name\":\"getCheckCodeInfoByCheckCode\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orgId\",\"type\":\"bytes32\"},{\"name\":\"checkCode\",\"type\":\"int256\"}],\"name\":\"getCheckCodeStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orgId\",\"type\":\"bytes32\"},{\"name\":\"checkCode\",\"type\":\"int256\"},{\"name\":\"retStatus\",\"type\":\"int256\"}],\"name\":\"setOrgCheckStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCheckCodeListLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMeta\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"check_code\",\"type\":\"int256\"},{\"name\":\"org_id\",\"type\":\"bytes32\"}],\"name\":\"getCheckInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"check_code\",\"type\":\"int256\"},{\"name\":\"org_id\",\"type\":\"bytes32\"}],\"name\":\"getAcquirerBankCheckInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"check_code\",\"type\":\"int256\"}],\"name\":\"setCheckCode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orgId\",\"type\":\"bytes32\"},{\"name\":\"lastCheckCode\",\"type\":\"int256\"},{\"name\":\"retStatus\",\"type\":\"int256\"},{\"name\":\"walletOwnerOrg\",\"type\":\"bytes32\"},{\"name\":\"totalRmbAmt\",\"type\":\"int256\"},{\"name\":\"totalTxAmt\",\"type\":\"int256\"},{\"name\":\"currency\",\"type\":\"int256\"},{\"name\":\"wbBalance\",\"type\":\"int256\"},{\"name\":\"timestamp\",\"type\":\"int256\"}],\"name\":\"setAllOrgCheckStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"orgId\",\"type\":\"bytes32\"},{\"name\":\"checkCode\",\"type\":\"int256\"}],\"name\":\"getRetOrgCheckStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orgId\",\"type\":\"bytes32\"},{\"name\":\"checkCode\",\"type\":\"int256\"}],\"name\":\"setCheckCodeStatus\",\"outputs\":[{\"name\":\"status\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"m_check_code_list\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"abi\",\"type\":\"string\"},{\"name\":\"check_info_name\",\"type\":\"string\"},{\"name\":\"check_info_abi\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oper\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"check_code\",\"type\":\"int256\"}],\"name\":\"transRetLog\",\"type\":\"event\"}]";

    public static final TransactionDecoder transactionDecoder = new TransactionDecoder(ABI, BINARY);

    public static final String FUNC_NAME = "name";

    public static final String FUNC_SETMETAADDRESS = "setMetaAddress";

    public static final String FUNC_GETCLEARCENTERCHECKINFO = "getClearCenterCheckInfo";

    public static final String FUNC_CURRENTCHECKCODE = "currentCheckCode";

    public static final String FUNC_CHECK_INFO_META = "check_info_meta";

    public static final String FUNC_GETISSUEBANKCHECKINFO = "getIssueBankCheckInfo";

    public static final String FUNC_GETORGCHECKSTATUS = "getOrgCheckStatus";

    public static final String FUNC_GETCHECKCODEBYINDEX = "getCheckCodeByIndex";

    public static final String FUNC_ABI = "abi";

    public static final String FUNC_GETALLORGCHECKSTATUS = "getAllOrgCheckStatus";

    public static final String FUNC_GETCHECKCODEINFOBYCHECKCODE = "getCheckCodeInfoByCheckCode";

    public static final String FUNC_GETCHECKCODESTATUS = "getCheckCodeStatus";

    public static final String FUNC_SETORGCHECKSTATUS = "setOrgCheckStatus";

    public static final String FUNC_GETCHECKCODELISTLENGTH = "getCheckCodeListLength";

    public static final String FUNC_GETMETA = "getMeta";

    public static final String FUNC_GETCHECKINFO = "getCheckInfo";

    public static final String FUNC_GETACQUIRERBANKCHECKINFO = "getAcquirerBankCheckInfo";

    public static final String FUNC_SETCHECKCODE = "setCheckCode";

    public static final String FUNC_SETALLORGCHECKSTATUS = "setAllOrgCheckStatus";

    public static final String FUNC_GETRETORGCHECKSTATUS = "getRetOrgCheckStatus";

    public static final String FUNC_SETCHECKCODESTATUS = "setCheckCodeStatus";

    public static final String FUNC_M_CHECK_CODE_LIST = "m_check_code_list";

    public static final Event TRANSRETLOG_EVENT = new Event("transRetLog", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
    ;

    @Deprecated
    protected CheckInfoManager(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected CheckInfoManager(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected CheckInfoManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected CheckInfoManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static TransactionDecoder getTransactionDecoder() {
        return transactionDecoder;
    }

    public RemoteCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> setMetaAddress(String meta) {
        final Function function = new Function(
                FUNC_SETMETAADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(meta)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setMetaAddress(String meta, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SETMETAADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(meta)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setMetaAddressSeq(String meta) {
        final Function function = new Function(
                FUNC_SETMETAADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(meta)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<String> getSetMetaAddressInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMETAADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> getClearCenterCheckInfo(BigInteger check_code, byte[] org_id) {
        final Function function = new Function(
                FUNC_GETCLEARCENTERCHECKINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(check_code), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(org_id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void getClearCenterCheckInfo(BigInteger check_code, byte[] org_id, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_GETCLEARCENTERCHECKINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(check_code), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(org_id)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getClearCenterCheckInfoSeq(BigInteger check_code, byte[] org_id) {
        final Function function = new Function(
                FUNC_GETCLEARCENTERCHECKINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(check_code), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(org_id)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<BigInteger, byte[]> getGetClearCenterCheckInfoInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GETCLEARCENTERCHECKINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<BigInteger, byte[]>(

                (BigInteger) results.get(0).getValue(), 
                (byte[]) results.get(1).getValue()
                );
    }

    public Tuple1<String> getGetClearCenterCheckInfoOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETCLEARCENTERCHECKINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public RemoteCall<BigInteger> currentCheckCode() {
        final Function function = new Function(FUNC_CURRENTCHECKCODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> check_info_meta() {
        final Function function = new Function(FUNC_CHECK_INFO_META, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> getIssueBankCheckInfo(BigInteger check_code, byte[] org_id) {
        final Function function = new Function(
                FUNC_GETISSUEBANKCHECKINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(check_code), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(org_id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void getIssueBankCheckInfo(BigInteger check_code, byte[] org_id, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_GETISSUEBANKCHECKINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(check_code), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(org_id)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getIssueBankCheckInfoSeq(BigInteger check_code, byte[] org_id) {
        final Function function = new Function(
                FUNC_GETISSUEBANKCHECKINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(check_code), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(org_id)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<BigInteger, byte[]> getGetIssueBankCheckInfoInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GETISSUEBANKCHECKINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<BigInteger, byte[]>(

                (BigInteger) results.get(0).getValue(), 
                (byte[]) results.get(1).getValue()
                );
    }

    public Tuple1<String> getGetIssueBankCheckInfoOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETISSUEBANKCHECKINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public RemoteCall<BigInteger> getOrgCheckStatus(byte[] orgId, BigInteger checkCode) {
        final Function function = new Function(FUNC_GETORGCHECKSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(checkCode)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getCheckCodeByIndex(BigInteger offset) {
        final Function function = new Function(FUNC_GETCHECKCODEBYINDEX, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(offset)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> abi() {
        final Function function = new Function(FUNC_ABI, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple8<BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> getAllOrgCheckStatus(byte[] orgId, BigInteger checkCode) {
        final Function function = new Function(FUNC_GETALLORGCHECKSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(checkCode)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
        return new RemoteCall<Tuple8<BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple8<BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple8<BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (byte[]) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> getCheckCodeInfoByCheckCode(BigInteger check_code, byte[] org_id) {
        final Function function = new Function(
                FUNC_GETCHECKCODEINFOBYCHECKCODE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(check_code), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(org_id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void getCheckCodeInfoByCheckCode(BigInteger check_code, byte[] org_id, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_GETCHECKCODEINFOBYCHECKCODE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(check_code), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(org_id)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getCheckCodeInfoByCheckCodeSeq(BigInteger check_code, byte[] org_id) {
        final Function function = new Function(
                FUNC_GETCHECKCODEINFOBYCHECKCODE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(check_code), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(org_id)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<BigInteger, byte[]> getGetCheckCodeInfoByCheckCodeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GETCHECKCODEINFOBYCHECKCODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<BigInteger, byte[]>(

                (BigInteger) results.get(0).getValue(), 
                (byte[]) results.get(1).getValue()
                );
    }

    public Tuple1<String> getGetCheckCodeInfoByCheckCodeOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETCHECKCODEINFOBYCHECKCODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> getCheckCodeStatus(byte[] orgId, BigInteger checkCode) {
        final Function function = new Function(
                FUNC_GETCHECKCODESTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(checkCode)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void getCheckCodeStatus(byte[] orgId, BigInteger checkCode, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_GETCHECKCODESTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(checkCode)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getCheckCodeStatusSeq(byte[] orgId, BigInteger checkCode) {
        final Function function = new Function(
                FUNC_GETCHECKCODESTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(checkCode)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<byte[], BigInteger> getGetCheckCodeStatusInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GETCHECKCODESTATUS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<byte[], BigInteger>(

                (byte[]) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getGetCheckCodeStatusOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETCHECKCODESTATUS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> setOrgCheckStatus(byte[] orgId, BigInteger checkCode, BigInteger retStatus) {
        final Function function = new Function(
                FUNC_SETORGCHECKSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(checkCode), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(retStatus)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setOrgCheckStatus(byte[] orgId, BigInteger checkCode, BigInteger retStatus, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SETORGCHECKSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(checkCode), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(retStatus)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setOrgCheckStatusSeq(byte[] orgId, BigInteger checkCode, BigInteger retStatus) {
        final Function function = new Function(
                FUNC_SETORGCHECKSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(checkCode), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(retStatus)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple3<byte[], BigInteger, BigInteger> getSetOrgCheckStatusInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETORGCHECKSTATUS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple3<byte[], BigInteger, BigInteger>(

                (byte[]) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public RemoteCall<BigInteger> getCheckCodeListLength() {
        final Function function = new Function(FUNC_GETCHECKCODELISTLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple3<String, String, String>> getMeta() {
        final Function function = new Function(FUNC_GETMETA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        return new RemoteCall<Tuple3<String, String, String>>(
                new Callable<Tuple3<String, String, String>>() {
                    @Override
                    public Tuple3<String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> getCheckInfo(BigInteger check_code, byte[] org_id) {
        final Function function = new Function(
                FUNC_GETCHECKINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(check_code), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(org_id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void getCheckInfo(BigInteger check_code, byte[] org_id, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_GETCHECKINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(check_code), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(org_id)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getCheckInfoSeq(BigInteger check_code, byte[] org_id) {
        final Function function = new Function(
                FUNC_GETCHECKINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(check_code), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(org_id)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<BigInteger, byte[]> getGetCheckInfoInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GETCHECKINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<BigInteger, byte[]>(

                (BigInteger) results.get(0).getValue(), 
                (byte[]) results.get(1).getValue()
                );
    }

    public Tuple1<String> getGetCheckInfoOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETCHECKINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> getAcquirerBankCheckInfo(BigInteger check_code, byte[] org_id) {
        final Function function = new Function(
                FUNC_GETACQUIRERBANKCHECKINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(check_code), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(org_id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void getAcquirerBankCheckInfo(BigInteger check_code, byte[] org_id, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_GETACQUIRERBANKCHECKINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(check_code), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(org_id)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getAcquirerBankCheckInfoSeq(BigInteger check_code, byte[] org_id) {
        final Function function = new Function(
                FUNC_GETACQUIRERBANKCHECKINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(check_code), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(org_id)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<BigInteger, byte[]> getGetAcquirerBankCheckInfoInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GETACQUIRERBANKCHECKINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<BigInteger, byte[]>(

                (BigInteger) results.get(0).getValue(), 
                (byte[]) results.get(1).getValue()
                );
    }

    public Tuple1<String> getGetAcquirerBankCheckInfoOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETACQUIRERBANKCHECKINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> setCheckCode(BigInteger check_code) {
        final Function function = new Function(
                FUNC_SETCHECKCODE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(check_code)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setCheckCode(BigInteger check_code, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SETCHECKCODE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(check_code)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setCheckCodeSeq(BigInteger check_code) {
        final Function function = new Function(
                FUNC_SETCHECKCODE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(check_code)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<BigInteger> getSetCheckCodeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETCHECKCODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> setAllOrgCheckStatus(byte[] orgId, BigInteger lastCheckCode, BigInteger retStatus, byte[] walletOwnerOrg, BigInteger totalRmbAmt, BigInteger totalTxAmt, BigInteger currency, BigInteger wbBalance, BigInteger timestamp) {
        final Function function = new Function(
                FUNC_SETALLORGCHECKSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(lastCheckCode), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(retStatus), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(walletOwnerOrg), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(totalRmbAmt), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(totalTxAmt), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(currency), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(wbBalance), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(timestamp)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setAllOrgCheckStatus(byte[] orgId, BigInteger lastCheckCode, BigInteger retStatus, byte[] walletOwnerOrg, BigInteger totalRmbAmt, BigInteger totalTxAmt, BigInteger currency, BigInteger wbBalance, BigInteger timestamp, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SETALLORGCHECKSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(lastCheckCode), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(retStatus), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(walletOwnerOrg), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(totalRmbAmt), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(totalTxAmt), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(currency), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(wbBalance), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(timestamp)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setAllOrgCheckStatusSeq(byte[] orgId, BigInteger lastCheckCode, BigInteger retStatus, byte[] walletOwnerOrg, BigInteger totalRmbAmt, BigInteger totalTxAmt, BigInteger currency, BigInteger wbBalance, BigInteger timestamp) {
        final Function function = new Function(
                FUNC_SETALLORGCHECKSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(lastCheckCode), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(retStatus), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(walletOwnerOrg), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(totalRmbAmt), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(totalTxAmt), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(currency), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(wbBalance), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(timestamp)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple9<byte[], BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> getSetAllOrgCheckStatusInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETALLORGCHECKSTATUS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple9<byte[], BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(

                (byte[]) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (byte[]) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue(), 
                (BigInteger) results.get(6).getValue(), 
                (BigInteger) results.get(7).getValue(), 
                (BigInteger) results.get(8).getValue()
                );
    }

    public RemoteCall<Tuple7<BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> getRetOrgCheckStatus(byte[] orgId, BigInteger checkCode) {
        final Function function = new Function(FUNC_GETRETORGCHECKSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(checkCode)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
        return new RemoteCall<Tuple7<BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple7<BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple7<BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> setCheckCodeStatus(byte[] orgId, BigInteger checkCode) {
        final Function function = new Function(
                FUNC_SETCHECKCODESTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(checkCode)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setCheckCodeStatus(byte[] orgId, BigInteger checkCode, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SETCHECKCODESTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(checkCode)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setCheckCodeStatusSeq(byte[] orgId, BigInteger checkCode) {
        final Function function = new Function(
                FUNC_SETCHECKCODESTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(checkCode)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<byte[], BigInteger> getSetCheckCodeStatusInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETCHECKCODESTATUS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<byte[], BigInteger>(

                (byte[]) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getSetCheckCodeStatusOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SETCHECKCODESTATUS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public RemoteCall<BigInteger> m_check_code_list(BigInteger param0) {
        final Function function = new Function(FUNC_M_CHECK_CODE_LIST, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public List<TransRetLogEventResponse> getTransRetLogEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSRETLOG_EVENT, transactionReceipt);
        ArrayList<TransRetLogEventResponse> responses = new ArrayList<TransRetLogEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransRetLogEventResponse typedResponse = new TransRetLogEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oper = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.check_code = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registertransRetLogEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(TRANSRETLOG_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registertransRetLogEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(TRANSRETLOG_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    @Deprecated
    public static CheckInfoManager load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new CheckInfoManager(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static CheckInfoManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new CheckInfoManager(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static CheckInfoManager load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new CheckInfoManager(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static CheckInfoManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new CheckInfoManager(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<CheckInfoManager> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String name, String abi, String check_info_name, String check_info_abi) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(abi), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(check_info_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(check_info_abi)));
        return deployRemoteCall(CheckInfoManager.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<CheckInfoManager> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String name, String abi, String check_info_name, String check_info_abi) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(abi), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(check_info_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(check_info_abi)));
        return deployRemoteCall(CheckInfoManager.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<CheckInfoManager> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String name, String abi, String check_info_name, String check_info_abi) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(abi), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(check_info_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(check_info_abi)));
        return deployRemoteCall(CheckInfoManager.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<CheckInfoManager> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String name, String abi, String check_info_name, String check_info_abi) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(abi), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(check_info_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(check_info_abi)));
        return deployRemoteCall(CheckInfoManager.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class TransRetLogEventResponse {
        public Log log;

        public String oper;

        public BigInteger status;

        public BigInteger check_code;
    }
}
